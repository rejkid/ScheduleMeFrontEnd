{"version":3,"file":"904.6109a312a5db6d9f.js","mappings":"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","names":["LayoutComponent","constructor","router","accountService","this","accountValue","navigate","static","t","i0","i1","i2","core","Xpm","selectors","decls","vars","consts","template","rf","ctx","TimeHandler","dateValidator","AC","value","moment","Constants","dateFormat","isValid","dateVaidator","dateTimeValidator","dateTimeFormat","Yz7","factory","ɵfac","LoginComponent_div_9_div_1_Template","LoginComponent_div_9_div_2_Template","ctx_r0","f","email","errors","required","LoginComponent_div_28_div_1_Template","ctx_r4","password","LoginComponent","formBuilder","route","alertService","DATE_FORMAT","loading","submitted","ngOnInit","form","group","Validators","dob","get","setValue","Date","format","controls","onSubmit","clear","invalid","login","pipe","first","subscribe","next","navigateByUrl","snapshot","queryParams","returnUrl","error","i3","LoginComponent_div_9_Template","LoginComponent_mat_error_22_Template","LoginComponent_div_28_Template","LoginComponent_span_32_Template","_c0","_r2","RegisterComponent_div_18_div_1_Template","title","RegisterComponent_div_23_div_1_Template","ctx_r1","firstName","RegisterComponent_div_28_div_1_Template","ctx_r2","lastName","RegisterComponent_div_33_div_1_Template","RegisterComponent_div_33_div_2_Template","ctx_r3","RegisterComponent_div_52_div_1_Template","RegisterComponent_div_52_div_2_Template","ctx_r7","minlength","RegisterComponent_div_57_div_1_Template","RegisterComponent_div_57_div_2_Template","ctx_r8","confirmPassword","mustMatch","RegisterComponent","minLength","acceptTerms","requiredTrue","validator","MustMatch","account","Account","register","success","keepAfterRouteChange","relativeTo","RegisterComponent_div_18_Template","RegisterComponent_div_23_Template","RegisterComponent_div_28_Template","RegisterComponent_div_33_Template","RegisterComponent_mat_error_46_Template","RegisterComponent_div_52_Template","RegisterComponent_div_57_Template","RegisterComponent_div_62_Template","RegisterComponent_span_65_Template","_r5","EmailStatus","Verifying","Failed","VerifyEmailComponent","emailStatus","token","DOB","replaceUrl","verifyEmail","console","log","url","VerifyEmailComponent_div_3_Template","VerifyEmailComponent_div_4_Template","ForgotPasswordComponent_div_8_div_1_Template","ForgotPasswordComponent_div_8_div_2_Template","ForgotPasswordComponent","forgotPassword","finalize","ForgotPasswordComponent_div_8_Template","ForgotPasswordComponent_mat_error_21_Template","ForgotPasswordComponent_span_24_Template","ResetPasswordComponent_form_5_div_5_div_1_Template","ResetPasswordComponent_form_5_div_5_div_2_Template","ResetPasswordComponent_form_5_div_10_div_1_Template","ResetPasswordComponent_form_5_div_10_div_2_Template","_r11","ctx_r10","ResetPasswordComponent_form_5_div_5_Template","ResetPasswordComponent_form_5_div_10_Template","ResetPasswordComponent_form_5_span_13_Template","TokenStatus","Validating","Valid","Invalid","routes","path","component","children","ResetPasswordComponent","tokenStatus","validateResetToken","resetPassword","ResetPasswordComponent_div_3_Template","ResetPasswordComponent_div_4_Template","ResetPasswordComponent_form_5_Template","AccountRoutingModule","oAB","cJS","RouterModule","forChild","CUSTOM_MOMENT_FORMATS","parse","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","AccountModule","provide","DateAdapter","useClass","MomentDateAdapter","deps","MAT_DATE_LOCALE","MAT_DATE_FORMATS","useValue","imports","CommonModule","ReactiveFormsModule","MaterialModule","MatSortModule","MatTableModule","MatPaginatorModule","MatButtonModule","MatDatepickerModule","MatNativeDateModule","MatInputModule","MatFormFieldModule","NgxMatDatetimePickerModule","NgxMatMomentModule","MatSelectModule","_rollupMoment__default","_rollupMoment","NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS","InjectionToken","providedIn","NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY","useUtc","range","length","valueFunction","valuesArray","Array","i","NgxMatMomentAdapter","NgxMatDateAdapter","dateLocale","_options","super","setLocale","locale","momentLocaleData","localeData","_localeData","firstDayOfWeek","longMonths","months","shortMonths","monthsShort","dates","createDate","longDaysOfWeek","weekdays","shortDaysOfWeek","weekdaysShort","narrowDaysOfWeek","weekdaysMin","getYear","date","clone","year","getMonth","month","getDate","getDayOfWeek","day","getMonthNames","style","getDateNames","getDayOfWeekNames","getYearName","getFirstDayOfWeek","getNumDaysInMonth","daysInMonth","Error","result","_createMoment","today","parseFormat","displayFormat","addCalendarYears","years","add","addCalendarMonths","addCalendarDays","days","toIso8601","deserialize","isDateInstance","ISO_8601","obj","isMoment","getHour","hours","getMinute","minutes","getSecond","seconds","setHour","setMinute","setSecond","strict","utc","ɵprov","DEFAULT_DATE_INPUT","NGX_MAT_MOMENT_FORMATS","NgxMomentDateModule","ɵmod","type","ɵinj","providers","NGX_MAT_DATE_FORMATS","MAT_MOMENT_DATE_ADAPTER_OPTIONS","MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY"],"sourceRoot":"webpack:///","sources":["./src/app/account/layout.component.ts","./src/app/account/layout.component.html","./src/app/_helpers/time.handler.ts","./src/app/account/login.component.html","./src/app/account/login.component.ts","./src/app/account/register.component.html","./src/app/account/register.component.ts","./src/app/account/verify-email.component.html","./src/app/account/verify-email.component.ts","./src/app/account/forgot-password.component.html","./src/app/account/forgot-password.component.ts","./src/app/account/reset-password.component.html","./src/app/account/reset-password.component.ts","./src/app/account/account-routing.module.ts","./src/app/account/account.module.ts","./node_modules/@angular-material-components/moment-adapter/fesm2020/angular-material-components-moment-adapter.mjs","./node_modules/@angular/material-moment-adapter/fesm2020/material-moment-adapter.mjs"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AccountService } from '../_services';\r\n\r\n@Component({ templateUrl: 'layout.component.html' })\r\nexport class LayoutComponent {\r\n    constructor(\r\n        private router: Router,\r\n        private accountService: AccountService\r\n    ) {\r\n        // redirect to home if already logged in\r\n        if (this.accountService.accountValue) {\r\n            this.router.navigate(['/']);\r\n        }\r\n    }\r\n}","<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-8 offset-sm-2 mt-5\">\r\n            <div class=\"card m-3\">\r\n                <router-outlet></router-outlet>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\n\r\n\r\nimport { AbstractControl, FormControl } from '@angular/forms';\r\nimport * as moment from 'moment';\r\nimport { Constants } from '../constants';\r\n\r\n@Injectable()\r\nexport class TimeHandler {\r\n    constructor() { }\r\n    static dateValidator(AC: FormControl) {\r\n        /* For testing purpose */\r\n        // if (AC.value instanceof Date) {\r\n        //     var date = AC.value;\r\n        //     console.log(\"AC.value:\" + \"Date\")\r\n        // } else if (moment.isMoment(AC.value)) {\r\n        //     var date = AC.value.toDate();\r\n        //     var dateStr = moment(date).format(Constants.dateFormat);\r\n        //     console.log(\"AC.value:\" + \"moment\")\r\n        // }\r\n        \r\n        if (AC && AC.value && !moment(AC.value, Constants.dateFormat, true).isValid()) {\r\n            return { 'dateVaidator': true };\r\n        }\r\n        return null;\r\n    }\r\n    static dateTimeValidator(AC: AbstractControl) {\r\n        if (AC && AC.value && !moment(AC.value, Constants.dateTimeFormat, true).isValid()) {\r\n            return { 'dateVaidator': true };\r\n        }\r\n        return null;\r\n    }\r\n}","<h3 class=\"card-header\">Login</h3>\r\n<div class=\"card-body\">\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"row\">\r\n            <div class=\"mb-3\">\r\n                <label id=\"emailLabel\">Email</label>\r\n                <input id=\"emailInput\" type=\"text\" formControlName=\"email\" class=\"form-control\"\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f['email'].errors }\" required />\r\n                <div *ngIf=\"submitted && f['email'].errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f['email'].errors['required']\">Email is required</div>\r\n                    <div *ngIf=\"f['email'].errors['email']\">Email is invalid</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div class=\"mb-3\">\r\n                <mat-form-field appearance=\"outline\" >\r\n                    <mat-label>DOB</mat-label>\r\n                    <input formControlName=\"dob\" #ref matInput [matDatepicker]=\"picker\" placeholder=\"Choose a date\" required>\r\n                    <mat-hint>{{DATE_FORMAT}}</mat-hint>\r\n                    <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                    <mat-datepicker #picker></mat-datepicker>\r\n                    <mat-error *ngIf=\"submitted && f['dob'].errors\">Invalid DOB</mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"mb-3\">\r\n                <label id=\"passwordLabel\">Password</label>\r\n                <input type=\"password\" formControlName=\"password\" class=\"form-control\"\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f['password'].errors }\" />\r\n                <div *ngIf=\"submitted && f['password'].errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f['password'].errors['required']\">Password is required</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-3\">\r\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                    Login\r\n                </button>\r\n            </div>\r\n            <div class=\"col-3\">\r\n                <a routerLink=\"../register\" class=\"btn btn-link\">Register</a>\r\n            </div>\r\n            <div class=\"col-5\">\r\n                <a routerLink=\"../forgot-password\" class=\"btn btn-link pr-0\">Forgot Password?</a>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport * as moment from 'moment';\r\nimport { TimeHandler } from '../_helpers/time.handler';\r\nimport { AccountService, AlertService } from '../_services';\r\nimport { Constants } from '../constants';\r\n\r\n\r\n@Component(\r\n    {\r\n        templateUrl: 'login.component.html',\r\n        styleUrls: ['login.component.less'],\r\n    })\r\nexport class LoginComponent implements OnInit {\r\n    DATE_FORMAT = Constants.dateFormat;\r\n\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            email: ['', [Validators.required, Validators.email]],\r\n            password: ['', Validators.required],\r\n            dob: ['', [Validators.required , TimeHandler.dateValidator]],\r\n        });\r\n        this.form.get('dob').setValue(moment(new Date()).format(Constants.dateFormat));\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.login(this.f['email'].value, this.f['password'].value, moment(this.f['dob'].value).format(Constants.dateFormat))\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    // get return url from query parameters or default to home page\r\n                    const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n                    this.router.navigateByUrl(returnUrl);\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}","<h3 class=\"card-header\">Register</h3>\r\n<div class=\"card-body\">\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"row\">\r\n            <div class=\"mb-3 col\">\r\n                <label>Title*</label>\r\n                <select formControlName=\"title\" class=\"form-control form-select\" [ngClass]=\"{ 'is-invalid': submitted && f['title'].errors }\">\r\n                    <option value=\"\"></option>\r\n                    <option value=\"Mr\">Mr</option>\r\n                    <option value=\"Mrs\">Mrs</option>\r\n                    <option value=\"Miss\">Miss</option>\r\n                    <option value=\"Ms\">Ms</option>\r\n                </select>\r\n                <div *ngIf=\"submitted && f['title'].errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f['title'].errors['required']\">Title is required</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"mb-3 col-5\">\r\n                <label>First Name*</label>\r\n                <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f['firstName'].errors }\" />\r\n                <div *ngIf=\"submitted && f['firstName'].errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f['firstName'].errors['required']\">First Name is required</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"mb-3 col-5\">\r\n                <label>Last Name*</label>\r\n                <input type=\"text\" formControlName=\"lastName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f['lastName'].errors }\" />\r\n                <div *ngIf=\"submitted && f['lastName'].errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f['lastName'].errors['required']\">Last Name is required</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n            <label>Email*</label>\r\n            <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f['email'].errors }\" />\r\n            <div *ngIf=\"submitted && f['email'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['email'].errors['required']\">Email is required</div>\r\n                <div *ngIf=\"f['email'].errors['email']\">Email must be a valid email address</div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"mb-3 row\">\r\n            <div class=\"col-4\">\r\n                <mat-form-field appearance=\"outline\" >\r\n                    <mat-label>DOB+</mat-label>\r\n                    <input formControlName=\"dob\" #ref matInput [matDatepicker]=\"picker\" placeholder=\"Choose a date\" required>\r\n                    <mat-hint>{{DATE_FORMAT}}</mat-hint>\r\n                    <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                    <mat-datepicker #picker></mat-datepicker>\r\n                    <mat-error *ngIf=\"submitted && f['dob'].errors\">Invalid DOB</mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    \r\n        <div class=\"row\">\r\n            <div class=\"mb-3 col\">\r\n                <label>Password*</label>\r\n                <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f['password'].errors }\" />\r\n                <div *ngIf=\"submitted && f['password'].errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f['password'].errors['required']\">Password is required</div>\r\n                    <div *ngIf=\"f['password'].errors['minlength']\">Password must be at least 6 characters</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"mb-3 col\">\r\n                <label>Confirm Password*</label>\r\n                <input type=\"password\" formControlName=\"confirmPassword\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f['confirmPassword'].errors }\" />\r\n                <div *ngIf=\"submitted && f['confirmPassword'].errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f['confirmPassword'].errors['required']\">Confirm Password is required</div>\r\n                    <div *ngIf=\"f['confirmPassword'].errors['mustMatch']\">Passwords must match</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"mb-3 form-check\">\r\n            <input type=\"checkbox\" formControlName=\"acceptTerms\" id=\"acceptTerms\" class=\"form-check-input\" [ngClass]=\"{ 'is-invalid': submitted && f['acceptTerms'].errors }\" />\r\n            <label for=\"acceptTerms\" class=\"form-check-label\">Accept Terms & Conditions</label>\r\n            <div *ngIf=\"submitted && f['acceptTerms'].errors\" class=\"invalid-feedback\">Accept Ts & Cs is required</div>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n            <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                Register\r\n            </button>\r\n            <a routerLink=\"../login\" href=\"\" class=\"btn btn-link\">Cancel</a>\r\n        </div>\r\n    </form>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport * as moment from 'moment';\r\nimport { MustMatch } from '../_helpers';\r\nimport { Account } from '../_models';\r\nimport { AccountService, AlertService } from '../_services';\r\nimport { Constants } from '../constants';\r\n\r\n@Component({ templateUrl: 'register.component.html' })\r\nexport class RegisterComponent implements OnInit {\r\n    DATE_FORMAT = Constants.dateFormat;\r\n    \r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            title: ['', Validators.required],\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            email: ['', [Validators.required, Validators.email]],\r\n            dob: ['', [Validators.required]],\r\n            password: ['', [Validators.required, Validators.minLength(6)]],\r\n            confirmPassword: ['', Validators.required],\r\n            acceptTerms: [false, Validators.requiredTrue]\r\n        }, {\r\n            validator: MustMatch('password', 'confirmPassword')\r\n        });\r\n        this.form.get('dob').setValue(new Date());\r\n    }\r\n\r\n    \r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n\r\n        var account : Account = new Account();\r\n        \r\n        account.title = this.f['title'].value; \r\n        account.firstName = this.f['firstName'].value;\r\n        account.lastName = this.f['lastName'].value;\r\n        account.email = this.f['email'].value;\r\n        account.dob = moment(this.f['dob'].value).format(Constants.dateFormat);\r\n        account.password = this.f['password'].value; \r\n        account.confirmPassword = this.f['confirmPassword'].value; \r\n        account.acceptTerms = this.f['acceptTerms'].value;\r\n        \r\n        this.accountService.register(account)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Registration successful, please check your email for verification instructions', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../login'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}","<h3 class=\"card-header\">Verify Email</h3>\r\n<div class=\"card-body\">\r\n    <div *ngIf=\"emailStatus == EmailStatus.Verifying\">\r\n        Verifying...\r\n    </div>\r\n    <div *ngIf=\"emailStatus == EmailStatus.Failed\">\r\n        Verification failed, you can also verify your account using the <a routerLink=\"forgot-password\">forgot password</a> page.\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '../_services';\r\n\r\nenum EmailStatus {\r\n    Verifying,\r\n    Failed\r\n}\r\n\r\n@Component({ templateUrl: 'verify-email.component.html' })\r\nexport class VerifyEmailComponent implements OnInit {\r\n    EmailStatus = EmailStatus;\r\n    emailStatus = EmailStatus.Verifying;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        const token = this.route.snapshot.queryParams['token'];\r\n        const dob = this.route.snapshot.queryParams['DOB'];\r\n\r\n        // remove token from url to prevent http referer leakage\r\n        this.router.navigate([], { relativeTo: this.route, replaceUrl: true });\r\n\r\n        this.accountService.verifyEmail(token, dob)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    console.log(\"From verify email page path is: \" + this.route.url);\r\n                    this.alertService.success('Verification successful, you can now login', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../login'], { relativeTo: this.route });\r\n                },\r\n                error: () => {\r\n                    this.emailStatus = EmailStatus.Failed;\r\n                }\r\n            });\r\n    }\r\n}","<h3 class=\"card-header\">Forgot Password</h3>\r\n<div class=\"card-body\">\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"mb-3\">\r\n            <label>Email</label>\r\n            <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f['email'].errors }\" />\r\n            <div *ngIf=\"submitted && f['email'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['email'].errors['required']\">Email is required</div>\r\n                <div *ngIf=\"f['email'].errors['email']\">Email is invalid</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"mb-3 row\">\r\n            <div class=\"col-4\">\r\n                <mat-form-field appearance=\"outline\" >\r\n                    <mat-label>DOB+</mat-label>\r\n                    <input formControlName=\"dob\" #ref matInput [matDatepicker]=\"picker\" placeholder=\"Choose a date\" required>\r\n                    <mat-hint>{{DATE_FORMAT}}</mat-hint>\r\n                    <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                    <mat-datepicker #picker></mat-datepicker>\r\n                    <mat-error *ngIf=\"submitted && f['dob'].errors\">Invalid DOB</mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"mb-3\">\r\n            <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                Submit\r\n            </button>\r\n            <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\r\n        </div>\r\n    </form>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport * as moment from 'moment';\r\nimport { finalize, first } from 'rxjs/operators';\r\nimport { TimeHandler } from '../_helpers/time.handler';\r\nimport { AccountService, AlertService } from '../_services';\r\nimport { Constants } from '../constants';\r\n\r\n\r\n@Component({ templateUrl: 'forgot-password.component.html' })\r\nexport class ForgotPasswordComponent implements OnInit {\r\n    DATE_FORMAT = Constants.dateFormat;\r\n\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            email: ['', [Validators.required, Validators.email]],\r\n            dob: ['', [Validators.required, TimeHandler.dateValidator]],\r\n        });\r\n        this.form.get('dob').setValue(new Date());\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n        this.loading = true;\r\n        this.alertService.clear();\r\n        this.accountService.forgotPassword(this.f['email'].value, moment(this.f['dob'].value).format(Constants.dateFormat))\r\n            .pipe(first())\r\n            .pipe(finalize(() => this.loading = false))\r\n            .subscribe({\r\n                next: () => this.alertService.success('Please check your email for password reset instructions'),\r\n                error: error => this.alertService.error(error)\r\n            });\r\n    }\r\n}","<h3 class=\"card-header\">Reset Password</h3>\r\n<div class=\"card-body\">\r\n    <div *ngIf=\"tokenStatus == TokenStatus.Validating\">\r\n        Validating token...\r\n    </div>\r\n    <div *ngIf=\"tokenStatus == TokenStatus.Invalid\">\r\n        Token validation failed, if the token has expired you can get a new one at the <a routerLink=\"../forgot-password\">forgot password</a> page.\r\n    </div>\r\n    <form *ngIf=\"tokenStatus == TokenStatus.Valid\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"mb-3\">\r\n            <label>Password</label>\r\n            <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f['password'].errors }\" />\r\n            <div *ngIf=\"submitted && f['password'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['password'].errors['required']\">Password is required</div>\r\n                <div *ngIf=\"f['password'].errors['minlength']\">Password must be at least 6 characters</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n            <label>Confirm Password</label>\r\n            <input type=\"password\" formControlName=\"confirmPassword\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f['confirmPassword'].errors }\" />\r\n            <div *ngIf=\"submitted && f['confirmPassword'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['confirmPassword'].errors['required']\">Confirm Password is required</div>\r\n                <div *ngIf=\"f['confirmPassword'].errors['mustMatch']\">Passwords must match</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n            <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                Reset Password\r\n            </button>\r\n            <a routerLink=\"../login\" class=\"btn btn-link\">Cancel</a>\r\n        </div>\r\n    </form>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '../_services';\r\nimport { MustMatch } from '../_helpers';\r\nimport { TimeHandler } from '../_helpers/time.handler';\r\nimport * as moment from 'moment';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nenum TokenStatus {\r\n    Validating,\r\n    Valid,\r\n    Invalid\r\n}\r\n\r\n@Component({ templateUrl: 'reset-password.component.html' })\r\nexport class ResetPasswordComponent implements OnInit {\r\n    TokenStatus = TokenStatus;\r\n    tokenStatus = TokenStatus.Validating;\r\n    token: string = null;\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            password: ['', [Validators.required, Validators.minLength(6)]],\r\n            confirmPassword: ['', Validators.required],\r\n        }, {\r\n            validator: MustMatch('password', 'confirmPassword')\r\n        });\r\n\r\n        const token = this.route.snapshot.queryParams['token'];\r\n        const dob = this.route.snapshot.queryParams['DOB'];\r\n\r\n        console.log(\"token=\" + token)\r\n        console.log(\"DOB=\" + dob)\r\n\r\n        // remove token from url to prevent http referer leakage\r\n        this.router.navigate([], { relativeTo: this.route, replaceUrl: true });\r\n\r\n\r\n        this.accountService.validateResetToken(token, dob)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.token = token;\r\n                    this.tokenStatus = TokenStatus.Valid;\r\n                },\r\n                error: () => {\r\n                    this.tokenStatus = TokenStatus.Invalid;\r\n                }\r\n            });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.resetPassword(this.token, this.f['password'].value, this.f['confirmPassword'].value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Password reset successful, you can now login', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../login'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LayoutComponent } from './layout.component';\r\nimport { LoginComponent } from './login.component';\r\nimport { RegisterComponent } from './register.component';\r\nimport { VerifyEmailComponent } from './verify-email.component';\r\nimport { ForgotPasswordComponent } from './forgot-password.component';\r\nimport { ResetPasswordComponent } from './reset-password.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: LayoutComponent,\r\n        children: [\r\n            { path: 'login', component: LoginComponent },\r\n            { path: 'register', component: RegisterComponent },\r\n            { path: 'verify-email', component: VerifyEmailComponent },\r\n            { path: 'forgot-password', component: ForgotPasswordComponent },\r\n            { path: 'reset-password', component: ResetPasswordComponent }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AccountRoutingModule { }","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { AccountRoutingModule } from './account-routing.module';\r\nimport { ForgotPasswordComponent } from './forgot-password.component';\r\nimport { LayoutComponent } from './layout.component';\r\nimport { LoginComponent } from './login.component';\r\nimport { RegisterComponent } from './register.component';\r\nimport { ResetPasswordComponent } from './reset-password.component';\r\nimport { VerifyEmailComponent } from './verify-email.component';\r\n\r\nimport { NgxMatDatetimePickerModule } from '@angular-material-components/datetime-picker';\r\nimport { NgxMatMomentModule } from '@angular-material-components/moment-adapter';\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MatNativeDateModule } from '@angular/material/core';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MaterialModule } from 'src/app/material/material.module';\r\nimport { Constants } from '../constants';\r\n\r\nconst CUSTOM_MOMENT_FORMATS = {\r\n  parse: {\r\n    dateInput:  Constants.dateFormat,\r\n  },\r\n  display: {\r\n    dateInput: Constants.dateFormat,\r\n    monthYearLabel: 'MMM YYYY',\r\n    dateA11yLabel: 'LL',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n  },\r\n};\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    AccountRoutingModule,\r\n\r\n    MaterialModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatButtonModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    NgxMatDatetimePickerModule,\r\n    NgxMatMomentModule,\r\n    MatSelectModule,\r\n\r\n\r\n  ],\r\n  declarations: [\r\n    LayoutComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    VerifyEmailComponent,\r\n    ForgotPasswordComponent,\r\n    ResetPasswordComponent,\r\n\r\n\r\n  ],\r\n  providers: [\r\n    {provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\r\n    {provide: MAT_DATE_FORMATS, useValue: CUSTOM_MOMENT_FORMATS},\r\n  ],\r\n})\r\nexport class AccountModule { }","import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\nimport { NgxMatDateAdapter, NGX_MAT_DATE_FORMATS } from '@angular-material-components/datetime-picker';\n\nconst moment = _rollupMoment__default || _rollupMoment;\r\n/** InjectionToken for moment date adapter to configure options. */\r\nconst NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken('NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\r\n    providedIn: 'root',\r\n    factory: NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY\r\n});\r\n/** @docs-private */\r\nfunction NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\r\n    return {\r\n        useUtc: false\r\n    };\r\n}\r\n/** Creates an array and fills it with values. */\r\nfunction range(length, valueFunction) {\r\n    const valuesArray = Array(length);\r\n    for (let i = 0; i < length; i++) {\r\n        valuesArray[i] = valueFunction(i);\r\n    }\r\n    return valuesArray;\r\n}\r\n/** Adapts Moment.js Dates for use with Angular Material. */\r\nclass NgxMatMomentAdapter extends NgxMatDateAdapter {\r\n    constructor(dateLocale, _options) {\r\n        super();\r\n        this._options = _options;\r\n        this.setLocale(dateLocale || moment.locale());\r\n    }\r\n    setLocale(locale) {\r\n        super.setLocale(locale);\r\n        let momentLocaleData = moment.localeData(locale);\r\n        this._localeData = {\r\n            firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\r\n            longMonths: momentLocaleData.months(),\r\n            shortMonths: momentLocaleData.monthsShort(),\r\n            dates: range(31, (i) => this.createDate(2017, 0, i + 1).format('D')),\r\n            longDaysOfWeek: momentLocaleData.weekdays(),\r\n            shortDaysOfWeek: momentLocaleData.weekdaysShort(),\r\n            narrowDaysOfWeek: momentLocaleData.weekdaysMin(),\r\n        };\r\n    }\r\n    getYear(date) {\r\n        return this.clone(date).year();\r\n    }\r\n    getMonth(date) {\r\n        return this.clone(date).month();\r\n    }\r\n    getDate(date) {\r\n        return this.clone(date).date();\r\n    }\r\n    getDayOfWeek(date) {\r\n        return this.clone(date).day();\r\n    }\r\n    getMonthNames(style) {\r\n        // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\r\n        return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\r\n    }\r\n    getDateNames() {\r\n        return this._localeData.dates;\r\n    }\r\n    getDayOfWeekNames(style) {\r\n        if (style == 'long') {\r\n            return this._localeData.longDaysOfWeek;\r\n        }\r\n        if (style == 'short') {\r\n            return this._localeData.shortDaysOfWeek;\r\n        }\r\n        return this._localeData.narrowDaysOfWeek;\r\n    }\r\n    getYearName(date) {\r\n        return this.clone(date).format('YYYY');\r\n    }\r\n    getFirstDayOfWeek() {\r\n        return this._localeData.firstDayOfWeek;\r\n    }\r\n    getNumDaysInMonth(date) {\r\n        return this.clone(date).daysInMonth();\r\n    }\r\n    clone(date) {\r\n        return date.clone().locale(this.locale);\r\n    }\r\n    createDate(year, month, date) {\r\n        // Moment.js will create an invalid date if any of the components are out of bounds, but we\r\n        // explicitly check each case so we can throw more descriptive errors.\r\n        if (month < 0 || month > 11) {\r\n            throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n        }\r\n        if (date < 1) {\r\n            throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n        }\r\n        const result = this._createMoment({ year, month, date }).locale(this.locale);\r\n        // If the result isn't valid, the date must have been out of bounds for this month.\r\n        if (!result.isValid()) {\r\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n        }\r\n        return result;\r\n    }\r\n    today() {\r\n        return this._createMoment().locale(this.locale);\r\n    }\r\n    parse(value, parseFormat) {\r\n        if (value && typeof value == 'string') {\r\n            return this._createMoment(value, parseFormat, this.locale);\r\n        }\r\n        return value ? this._createMoment(value).locale(this.locale) : null;\r\n    }\r\n    format(date, displayFormat) {\r\n        date = this.clone(date);\r\n        if (!this.isValid(date)) {\r\n            throw Error('MomentDateAdapter: Cannot format invalid date.');\r\n        }\r\n        return date.format(displayFormat);\r\n    }\r\n    addCalendarYears(date, years) {\r\n        return this.clone(date).add({ years });\r\n    }\r\n    addCalendarMonths(date, months) {\r\n        return this.clone(date).add({ months });\r\n    }\r\n    addCalendarDays(date, days) {\r\n        return this.clone(date).add({ days });\r\n    }\r\n    toIso8601(date) {\r\n        return this.clone(date).format();\r\n    }\r\n    /**\r\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\r\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\r\n     * string into null. Returns an invalid date for all other values.\r\n     */\r\n    deserialize(value) {\r\n        let date;\r\n        if (value instanceof Date) {\r\n            date = this._createMoment(value).locale(this.locale);\r\n        }\r\n        else if (this.isDateInstance(value)) {\r\n            // Note: assumes that cloning also sets the correct locale.\r\n            return this.clone(value);\r\n        }\r\n        if (typeof value === 'string') {\r\n            if (!value) {\r\n                return null;\r\n            }\r\n            date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\r\n        }\r\n        if (date && this.isValid(date)) {\r\n            return this._createMoment(date).locale(this.locale);\r\n        }\r\n        return super.deserialize(value);\r\n    }\r\n    isDateInstance(obj) {\r\n        return moment.isMoment(obj);\r\n    }\r\n    isValid(date) {\r\n        return this.clone(date).isValid();\r\n    }\r\n    invalid() {\r\n        return moment.invalid();\r\n    }\r\n    getHour(date) {\r\n        return date.hours();\r\n    }\r\n    getMinute(date) {\r\n        return date.minutes();\r\n    }\r\n    getSecond(date) {\r\n        return date.seconds();\r\n    }\r\n    setHour(date, value) {\r\n        date.hours(value);\r\n    }\r\n    setMinute(date, value) {\r\n        date.minutes(value);\r\n    }\r\n    setSecond(date, value) {\r\n        date.seconds(value);\r\n    }\r\n    /** Creates a Moment instance while respecting the current UTC settings. */\r\n    _createMoment(date, format, locale) {\r\n        const { strict, useUtc } = this._options || {};\r\n        return useUtc\r\n            ? moment.utc(date, format, locale, strict)\r\n            : moment(date, format, locale, strict);\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatMomentAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatMomentAdapter, deps: [{ token: MAT_DATE_LOCALE, optional: true }, { token: NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ NgxMatMomentAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatMomentAdapter });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatMomentAdapter, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [MAT_DATE_LOCALE]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS]\r\n                }] }]; } });\n\nconst DEFAULT_DATE_INPUT = 'l, LTS';\r\nconst NGX_MAT_MOMENT_FORMATS = {\r\n    parse: {\r\n        dateInput: DEFAULT_DATE_INPUT,\r\n    },\r\n    display: {\r\n        dateInput: DEFAULT_DATE_INPUT,\r\n        monthYearLabel: 'MMM YYYY',\r\n        dateA11yLabel: 'LL',\r\n        monthYearA11yLabel: 'MMMM YYYY',\r\n    },\r\n};\n\nclass NgxMomentDateModule {\r\n}\r\n/** @nocollapse */ NgxMomentDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMomentDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgxMomentDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMomentDateModule });\r\n/** @nocollapse */ NgxMomentDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMomentDateModule, providers: [\r\n        {\r\n            provide: NgxMatDateAdapter,\r\n            useClass: NgxMatMomentAdapter,\r\n            deps: [MAT_DATE_LOCALE, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS]\r\n        }\r\n    ] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMomentDateModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    providers: [\r\n                        {\r\n                            provide: NgxMatDateAdapter,\r\n                            useClass: NgxMatMomentAdapter,\r\n                            deps: [MAT_DATE_LOCALE, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS]\r\n                        }\r\n                    ],\r\n                }]\r\n        }] });\r\nclass NgxMatMomentModule {\r\n}\r\n/** @nocollapse */ NgxMatMomentModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatMomentModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgxMatMomentModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatMomentModule, imports: [NgxMomentDateModule] });\r\n/** @nocollapse */ NgxMatMomentModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatMomentModule, providers: [{ provide: NGX_MAT_DATE_FORMATS, useValue: NGX_MAT_MOMENT_FORMATS }], imports: [NgxMomentDateModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatMomentModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [NgxMomentDateModule],\r\n                    providers: [{ provide: NGX_MAT_DATE_FORMATS, useValue: NGX_MAT_MOMENT_FORMATS }],\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-mat-moment-adapter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, NGX_MAT_MOMENT_FORMATS, NgxMatMomentAdapter, NgxMatMomentModule, NgxMomentDateModule };\n//# sourceMappingURL=angular-material-components-moment-adapter.mjs.map\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst moment = _rollupMoment__default || _rollupMoment;\n/** InjectionToken for moment date adapter to configure options. */\nconst MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken('MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\n    providedIn: 'root',\n    factory: MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\n    return {\n        useUtc: false,\n    };\n}\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n    const valuesArray = Array(length);\n    for (let i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n/** Adapts Moment.js Dates for use with Angular Material. */\nclass MomentDateAdapter extends DateAdapter {\n    constructor(dateLocale, _options) {\n        super();\n        this._options = _options;\n        this.setLocale(dateLocale || moment.locale());\n    }\n    setLocale(locale) {\n        super.setLocale(locale);\n        let momentLocaleData = moment.localeData(locale);\n        this._localeData = {\n            firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n            longMonths: momentLocaleData.months(),\n            shortMonths: momentLocaleData.monthsShort(),\n            dates: range(31, i => this.createDate(2017, 0, i + 1).format('D')),\n            longDaysOfWeek: momentLocaleData.weekdays(),\n            shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n            narrowDaysOfWeek: momentLocaleData.weekdaysMin(),\n        };\n    }\n    getYear(date) {\n        return this.clone(date).year();\n    }\n    getMonth(date) {\n        return this.clone(date).month();\n    }\n    getDate(date) {\n        return this.clone(date).date();\n    }\n    getDayOfWeek(date) {\n        return this.clone(date).day();\n    }\n    getMonthNames(style) {\n        // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n        return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n    }\n    getDateNames() {\n        return this._localeData.dates;\n    }\n    getDayOfWeekNames(style) {\n        if (style == 'long') {\n            return this._localeData.longDaysOfWeek;\n        }\n        if (style == 'short') {\n            return this._localeData.shortDaysOfWeek;\n        }\n        return this._localeData.narrowDaysOfWeek;\n    }\n    getYearName(date) {\n        return this.clone(date).format('YYYY');\n    }\n    getFirstDayOfWeek() {\n        return this._localeData.firstDayOfWeek;\n    }\n    getNumDaysInMonth(date) {\n        return this.clone(date).daysInMonth();\n    }\n    clone(date) {\n        return date.clone().locale(this.locale);\n    }\n    createDate(year, month, date) {\n        // Moment.js will create an invalid date if any of the components are out of bounds, but we\n        // explicitly check each case so we can throw more descriptive errors.\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (month < 0 || month > 11) {\n                throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n            }\n            if (date < 1) {\n                throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n            }\n        }\n        const result = this._createMoment({ year, month, date }).locale(this.locale);\n        // If the result isn't valid, the date must have been out of bounds for this month.\n        if (!result.isValid() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n        }\n        return result;\n    }\n    today() {\n        return this._createMoment().locale(this.locale);\n    }\n    parse(value, parseFormat) {\n        if (value && typeof value == 'string') {\n            return this._createMoment(value, parseFormat, this.locale);\n        }\n        return value ? this._createMoment(value).locale(this.locale) : null;\n    }\n    format(date, displayFormat) {\n        date = this.clone(date);\n        if (!this.isValid(date) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('MomentDateAdapter: Cannot format invalid date.');\n        }\n        return date.format(displayFormat);\n    }\n    addCalendarYears(date, years) {\n        return this.clone(date).add({ years });\n    }\n    addCalendarMonths(date, months) {\n        return this.clone(date).add({ months });\n    }\n    addCalendarDays(date, days) {\n        return this.clone(date).add({ days });\n    }\n    toIso8601(date) {\n        return this.clone(date).format();\n    }\n    /**\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n     * string into null. Returns an invalid date for all other values.\n     */\n    deserialize(value) {\n        let date;\n        if (value instanceof Date) {\n            date = this._createMoment(value).locale(this.locale);\n        }\n        else if (this.isDateInstance(value)) {\n            // Note: assumes that cloning also sets the correct locale.\n            return this.clone(value);\n        }\n        if (typeof value === 'string') {\n            if (!value) {\n                return null;\n            }\n            date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n        }\n        if (date && this.isValid(date)) {\n            return this._createMoment(date).locale(this.locale);\n        }\n        return super.deserialize(value);\n    }\n    isDateInstance(obj) {\n        return moment.isMoment(obj);\n    }\n    isValid(date) {\n        return this.clone(date).isValid();\n    }\n    invalid() {\n        return moment.invalid();\n    }\n    /** Creates a Moment instance while respecting the current UTC settings. */\n    _createMoment(date, format, locale) {\n        const { strict, useUtc } = this._options || {};\n        return useUtc ? moment.utc(date, format, locale, strict) : moment(date, format, locale, strict);\n    }\n}\nMomentDateAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MomentDateAdapter, deps: [{ token: MAT_DATE_LOCALE, optional: true }, { token: MAT_MOMENT_DATE_ADAPTER_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nMomentDateAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MomentDateAdapter });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MomentDateAdapter, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_DATE_LOCALE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_MOMENT_DATE_FORMATS = {\n    parse: {\n        dateInput: 'l',\n    },\n    display: {\n        dateInput: 'l',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n    },\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MomentDateModule {\n}\nMomentDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MomentDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMomentDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MomentDateModule });\nMomentDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MomentDateModule, providers: [\n        {\n            provide: DateAdapter,\n            useClass: MomentDateAdapter,\n            deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],\n        },\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MomentDateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        {\n                            provide: DateAdapter,\n                            useClass: MomentDateAdapter,\n                            deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],\n                        },\n                    ],\n                }]\n        }] });\nclass MatMomentDateModule {\n}\nMatMomentDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatMomentDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatMomentDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatMomentDateModule, imports: [MomentDateModule] });\nMatMomentDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatMomentDateModule, providers: [{ provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS }], imports: [MomentDateModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatMomentDateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MomentDateModule],\n                    providers: [{ provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS }],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, MAT_MOMENT_DATE_FORMATS, MatMomentDateModule, MomentDateAdapter, MomentDateModule };\n"],"x_google_ignoreList":[15,16]}
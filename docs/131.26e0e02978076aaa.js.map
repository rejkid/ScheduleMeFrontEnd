{"version":3,"file":"131.26e0e02978076aaa.js","mappings":"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","names":["i0","AddEditComponent_div_17_div_1_Template","ctx_r2","f","title","errors","required","AddEditComponent_div_22_div_1_Template","ctx_r3","firstName","AddEditComponent_div_27_div_1_Template","ctx_r4","lastName","AddEditComponent_div_33_div_1_Template","AddEditComponent_div_33_div_2_Template","ctx_r5","email","item_r21","AddEditComponent_div_54_div_1_Template","ctx_r8","role","AddEditComponent_div_76_div_1_Template","AddEditComponent_div_76_div_2_Template","ctx_r13","password","minlength","AddEditComponent_div_81_div_1_Template","AddEditComponent_div_81_div_2_Template","ctx_r14","confirmPassword","mustMatch","AddEditComponent","constructor","formBuilder","route","router","accountService","alertService","this","DATE_FORMAT","Constants","dateFormat","loading","submitted","roles","userFunctions","isLoaded","countryCodes","Object","values","Role","filter","value","ngAfterViewInit","ngOnInit","id","snapshot","params","isAddMode","form","group","Validators","dob","minLength","nullValidator","scheduleGroup","phoneNumber","validator","MustMatch","getById","pipe","first","subscribe","next","x","account","patchValue","get","setValue","moment","format","error","console","controls","onSubmit","clear","invalid","createAccount","updateAccount","Account","create","success","keepAfterRouteChange","navigate","relativeTo","update","static","t","i1","i2","i3","fesm2022_core","Xpm","selectors","decls","vars","consts","template","rf","ctx","AddEditComponent_h1_0_Template","AddEditComponent_h1_1_Template","AddEditComponent_div_17_Template","AddEditComponent_div_22_Template","AddEditComponent_div_27_Template","AddEditComponent_div_33_Template","AddEditComponent_ng_container_43_Template","AddEditComponent_option_53_Template","AddEditComponent_div_54_Template","AddEditComponent_mat_error_69_Template","AddEditComponent_div_70_Template","AddEditComponent_div_76_Template","AddEditComponent_div_81_Template","AddEditComponent_span_85_Template","_c0","hasError","_r10","_c1","routes","path","component","AddEditRoutingModule","oAB","cJS","RouterModule","forChild","CUSTOM_MOMENT_FORMATS","parse","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","AddEditModule","provide","DateAdapter","useClass","MomentDateAdapter","deps","MAT_DATE_LOCALE","MAT_DATE_FORMATS","useValue","imports","CommonModule","FormsModule","ReactiveFormsModule","MaterialModule","MatCardModule","MatInputModule","MatTableModule","MatDatepickerModule","MatFormFieldModule","NgxMatDatetimePickerModule"],"sourceRoot":"webpack:///","sources":["./src/app/admin/accounts/add.edit/add-edit.component.html","./src/app/admin/accounts/add.edit/add-edit.component.ts","./src/app/admin/accounts/add.edit/add.edit-routing.module.ts","./src/app/admin/accounts/add.edit/add.edit.module.ts"],"sourcesContent":["<h1 *ngIf=\"isAddMode\">Create Account</h1>\r\n<h1 *ngIf=\"!isAddMode\">Edit Account</h1>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"mb-3 row\">\r\n        <div class=\"col-4\">\r\n            <label>Title*</label>\r\n            <select formControlName=\"title\" class=\"form-select\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['title'].errors }\">\r\n                <option value=\"\"></option>\r\n                <option value=\"Mr\">Mr</option>\r\n                <option value=\"Mrs\">Mrs</option>\r\n                <option value=\"Miss\">Miss</option>\r\n                <option value=\"Ms\">Ms</option>\r\n            </select>\r\n            <div *ngIf=\"submitted && f['title'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['title'].errors['required']\">Title is required</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-4\">\r\n            <label>First Name*</label>\r\n            <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['firstName'].errors }\" />\r\n            <div *ngIf=\"submitted && f['firstName'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['firstName'].errors['required']\">First Name is required</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-4\">\r\n            <label>Last Name*</label>\r\n            <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['lastName'].errors }\" />\r\n            <div *ngIf=\"submitted && f['lastName'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['lastName'].errors['required']\">Last Name is required</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"mb-3 col-12\">\r\n            <label>Email*</label>\r\n            <input type=\"text\" formControlName=\"email\" class=\"form-control\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['email'].errors }\" />\r\n            <div *ngIf=\"submitted && f['email'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['email'].errors['required']\">Email is required</div>\r\n                <div *ngIf=\"f['email'].errors['email']\">Email must be a valid email address</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"mb-2 row col-10\">\r\n        <div class=\"col\">\r\n            <label>Phone</label>\r\n            <table class=\"mb-3 col-10\">\r\n                <tr>\r\n                    <td>\r\n                        <div>\r\n                            <input type=\"text\" formControlName=\"phoneNumber\" class=\"form-control\" autocomplete=\"off\"\r\n                                autofocus=\"true\" placeholder=\"Phone number\" [maxlength]=\"10\" [minlength]=\"10\"\r\n                                [ngClass]=\"{ 'is-invalid': form.controls['phoneNumber'].hasError('phoneNumberInvalid') }\">\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n\r\n            </table>\r\n            <ng-container class=\"\" *ngIf=\"form.controls['phoneNumber'].hasError('phoneNumberInvalid')\">\r\n                <div class=\"input-warning text-danger mt-1 error robot_register_invalidPhoneNumberError\">\r\n                    Wrong phone number\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n\r\n        <div class=\"col-2\">\r\n            <label for=\"scheduleGroup\">Team Group</label>\r\n            <input type=\"text\" class=\"form-control\" formControlName=\"scheduleGroup\" ng-value=\"account.scheduleGroup\"\r\n                placeholder=\"\" readonly />\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"mb-3 col-3\">\r\n            <label>Role*</label>\r\n            <select formControlName=\"role\" class=\"form-select\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['role'].errors }\">\r\n                <option *ngFor=\"let item of roles\">\r\n                    {{ item }}\r\n                </option>\r\n            </select>\r\n\r\n            <div *ngIf=\"submitted && f['role'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['role'].errors['required']\">Role is required</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Insert the component DOB -->\r\n    <!-- <app-dob></app-dob> -->\r\n    <mat-card class=\"mb-3\" appearance=\"outlined\">\r\n        <mat-card-content>\r\n            <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>DOB+</mat-label>\r\n                        <input formControlName=\"dob\" #ref matInput [matDatepicker]=\"picker\" placeholder=\"Choose a date\"\r\n                            required>\r\n                        <mat-hint>{{DATE_FORMAT}}</mat-hint>\r\n                        <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                        <mat-datepicker #picker></mat-datepicker>\r\n                        <mat-error *ngIf=\"submitted && f['dob'].errors\">Invalid DOB</mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n        </mat-card-content>\r\n    </mat-card>\r\n\r\n    <div *ngIf=\"!isAddMode\">\r\n        <h3 class=\"pt-3\">Change Password</h3>\r\n        <p>Leave blank to keep the same password</p>\r\n    </div>\r\n    <div class=\"mb-3 row\">\r\n        <div class=\"col\">\r\n            <label>Password</label>\r\n            <input type=\"password\" formControlName=\"password\" class=\"form-control\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['password'].errors }\" />\r\n            <div *ngIf=\"submitted && f['password'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['password'].errors['required']\">Password is required</div>\r\n                <div *ngIf=\"f['password'].errors['minlength']\">Password must be at least 6 characters</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col\">\r\n            <label>Confirm Password</label>\r\n            <input type=\"password\" formControlName=\"confirmPassword\" class=\"form-control\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['confirmPassword'].errors }\" />\r\n            <div *ngIf=\"submitted && f['confirmPassword'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['confirmPassword'].errors['required']\">Confirm Password is required</div>\r\n                <div *ngIf=\"f['confirmPassword'].errors['mustMatch']\">Passwords must match</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n        <!-- <button [disabled]=\"loading || !form.valid\" class=\"btn btn-primary\">\r\n            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n            Update\r\n        </button> -->\r\n        <div class=\"col-1\">\r\n            <button class=\"btn btn-primary\">\r\n                <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                Update\r\n            </button>\r\n        </div>\r\n        <div class=\"col-1\">\r\n            <a [routerLink]=\"['/admin/accounts']\" class=\"btn btn-primary\">Back</a>\r\n        </div>\r\n    </div>\r\n</form>","import { AfterViewInit, Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { first } from 'rxjs/operators';\r\nimport { MustMatch } from 'src/app/_helpers';\r\n\r\nimport * as moment from 'moment';\r\nimport { Account, Role } from 'src/app/_models';\r\nimport { UserFunction } from 'src/app/_models/userfunction';\r\nimport { AccountService, AlertService } from 'src/app/_services';\r\nimport { Constants } from 'src/app/constants';\r\n\r\n@Component({ templateUrl: './add-edit.component.html',\r\nstyleUrls: ['./add-edit.component.less'], \r\n})\r\nexport class AddEditComponent implements OnInit, AfterViewInit {\r\n\r\n    DATE_FORMAT = Constants.dateFormat;\r\n\r\n    form: FormGroup;\r\n    id: string;// =  this.route.snapshot.params['id'];;\r\n    isAddMode: boolean;\r\n    loading = false;\r\n    submitted = false;\r\n    roles: string[] = [];\r\n    account: Account;\r\n    userFunctions: UserFunction[] = [];\r\n    isLoaded: boolean = false;\r\n    countryCodes: number[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) {\r\n        this.roles = Object.values(Role).filter(value => typeof value === 'string') as string[]\r\n\r\n    }\r\n    ngAfterViewInit(): void {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.id = this.route.snapshot.params['id'];\r\n        this.isAddMode = !this.id;\r\n\r\n\r\n        this.form = this.formBuilder.group({\r\n            title: ['', Validators.required],\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            email: ['', [Validators.required, Validators.email]],\r\n            role: [this.roles[0], Validators.required],\r\n            dob: ['', [Validators.required/* , TimeHandler.dateValidator */]],\r\n            password: ['', [Validators.minLength(6), this.isAddMode ? Validators.required : Validators.nullValidator]],\r\n            scheduleGroup: ['',[Validators.nullValidator]],\r\n            confirmPassword: [''],\r\n            phoneNumber: [\"\", []],\r\n        }, {\r\n            validator: [MustMatch('password', 'confirmPassword')]\r\n        });\r\n\r\n        if (!this.isAddMode) {\r\n            this.accountService.getById(this.id)\r\n                .pipe(first())\r\n                .subscribe({\r\n                    next: (x) => {\r\n                        // Edit mode\r\n                        this.account = x; // initial account\r\n                        this.form.patchValue(x);\r\n                        this.form.get('dob').setValue(moment(this.account.dob).format(Constants.dateFormat));\r\n                    },\r\n                    error: error => {\r\n                        console.error(error);\r\n                    }\r\n                });\r\n        } else {\r\n        }\r\n    }\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        \r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n\r\n        if (this.isAddMode) {\r\n            this.createAccount();\r\n        } else {\r\n            this.updateAccount();\r\n        }\r\n    }\r\n\r\n    private createAccount() {\r\n\r\n        var account : Account = new Account();\r\n        account.title = this.f['title'].value; \r\n        account.firstName = this.f['firstName'].value;\r\n        account.lastName = this.f['lastName'].value;\r\n        account.email = this.f['email'].value;\r\n        account.role = this.f['role'].value;\r\n        account.dob = moment(this.f['dob'].value).format(Constants.dateFormat);\r\n        account.password = this.f['password'].value; \r\n        account.confirmPassword = this.f['confirmPassword'].value; \r\n        account.phoneNumber = this.f['phoneNumber'].value;\r\n\r\n        this.accountService.create(account)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Account created successfully', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    private updateAccount() {\r\n\r\n        var account : Account = new Account();\r\n        \r\n        account.title = this.f['title'].value; \r\n        account.firstName = this.f['firstName'].value;\r\n        account.lastName = this.f['lastName'].value;\r\n        account.email = this.f['email'].value;\r\n        account.role = this.f['role'].value;\r\n        account.dob = moment(this.f['dob'].value).format(Constants.dateFormat);\r\n        account.password = this.f['password'].value; \r\n        account.confirmPassword = this.f['confirmPassword'].value; \r\n        account.phoneNumber = this.f['phoneNumber'].value;\r\n\r\n        this.accountService.update(this.id, account)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: (value) => {\r\n                    this.alertService.success('Update successful', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../../'], { relativeTo: this.route });\r\n                    this.loading = false;\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AddEditComponent } from './add-edit.component';\n\nconst routes: Routes = [\n  { path: 'add',  component: AddEditComponent  },\n  { path: 'edit/:id',  component: AddEditComponent  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AddEditRoutingModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Constants } from 'src/app/constants';\n\nimport { NgxMatDatetimePickerModule } from '@angular-material-components/datetime-picker';\n\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatTableModule } from '@angular/material/table';\nimport { MaterialModule } from 'src/app/material/material.module';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatInputModule } from '@angular/material/input';\nimport { RouterModule } from '@angular/router';\nimport { AddEditComponent } from './add-edit.component';\nimport { AddEditRoutingModule } from './add.edit-routing.module';\n\n\n\n\n\nconst CUSTOM_MOMENT_FORMATS = {\n  parse: {\n    dateInput:  Constants.dateFormat,\n  },\n  display: {\n    dateInput: Constants.dateFormat,\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n};\n\n@NgModule({\n  declarations: [\n    AddEditComponent,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    \n\n    MaterialModule,\n    MatCardModule,\n    MatInputModule,\n    MatTableModule,\n    MatDatepickerModule,\n    MatFormFieldModule,\n    NgxMatDatetimePickerModule,\n    RouterModule,\n    AddEditRoutingModule\n    \n    \n    \n  ],\n  exports: [\n    /* CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MaterialModule,\n    MatCardModule,\n    MatInputModule,\n    MatTableModule,\n    MatDatepickerModule,\n    MatFormFieldModule,\n    NgxMatDatetimePickerModule,\n    RouterModule */\n  ],\n  providers: [\n   \n    {provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\n    {provide: MAT_DATE_FORMATS, useValue: CUSTOM_MOMENT_FORMATS},\n\n  ],\n})\nexport class AddEditModule { }\n"],"x_google_ignoreList":[]}
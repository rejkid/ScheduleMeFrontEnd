{"version":3,"file":"909.fe88c216f93b3eb2.js","mappings":"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","names":["LayoutComponent","static","this","t","core","Xpm","selectors","decls","vars","consts","template","rf","ctx","i0","DetailsComponent","constructor","accountService","account","accountValue","i1","title","firstName","lastName","email","UpdateComponent_div_17_div_1_Template","ctx_r0","f","errors","required","UpdateComponent_div_22_div_1_Template","ctx_r1","UpdateComponent_div_27_div_1_Template","ctx_r2","UpdateComponent_div_33_div_1_Template","UpdateComponent_div_33_div_2_Template","ctx_r3","UpdateComponent_div_66_div_1_Template","UpdateComponent_div_66_div_2_Template","ctx_r8","password","minlength","UpdateComponent_div_71_div_1_Template","UpdateComponent_div_71_div_2_Template","ctx_r9","confirmPassword","mustMatch","routes","path","component","children","UpdateComponent","formBuilder","route","router","alertService","DATE_FORMAT","Constants","dateFormat","loading","submitted","deleting","schedules","id","countryCodes","ngOnInit","dob","moment","format","toDate","form","group","Validators","minLength","phoneNumber","validator","MustMatch","controls","onSubmit","clear","invalid","value","update","pipe","first","subscribe","next","success","keepAfterRouteChange","error","onDelete","confirm","delete","i2","i3","UpdateComponent_div_17_Template","UpdateComponent_div_22_Template","UpdateComponent_div_27_Template","UpdateComponent_div_33_Template","UpdateComponent_ng_container_43_Template","UpdateComponent_mat_error_56_Template","UpdateComponent_div_66_Template","UpdateComponent_div_71_Template","UpdateComponent_span_74_Template","_c0","hasError","length","_r6","_c1","valid","ProfileRoutingModule","oAB","cJS","RouterModule","forChild","CUSTOM_MOMENT_FORMATS","parse","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","ProfileModule","provide","DateAdapter","useClass","MomentDateAdapter","deps","MAT_DATE_LOCALE","MAT_DATE_FORMATS","useValue","imports","CommonModule","ReactiveFormsModule","ScheduleModule","MaterialModule","MatSortModule","MatTableModule","MatPaginatorModule","MatButtonModule","MatDatepickerModule","MatNativeDateModule","MatInputModule","MatFormFieldModule","NgxMatDatetimePickerModule","NgxMatMomentModule","MatSelectModule"],"sourceRoot":"webpack:///","sources":["./src/app/profile/layout.component.ts","./src/app/profile/layout.component.html","./src/app/profile/details.component.ts","./src/app/profile/details.component.html","./src/app/profile/update.component.html","./src/app/profile/profile-routing.module.ts","./src/app/profile/update.component.ts","./src/app/profile/profile.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({ templateUrl: 'layout.component.html' })\r\nexport class LayoutComponent { }","<div class=\"p-4\">\r\n    <div class=\"container\">\r\n        <router-outlet></router-outlet>\r\n    </div>\r\n</div>\r\n","import { Component } from '@angular/core';\r\n\r\nimport { AccountService } from '../_services';\r\n\r\n@Component({ templateUrl: 'details.component.html' })\r\nexport class DetailsComponent {\r\n    account = this.accountService.accountValue;\r\n\r\n    constructor(private accountService: AccountService) { }\r\n}","<h1>My Profile</h1>\r\n<p>\r\n    <strong>Name: </strong> {{account.title}} {{account.firstName}} {{account.lastName}}<br />\r\n    <strong>Email: </strong> {{account.email}}\r\n</p>\r\n<p><a routerLink=\"update\">Update Profile</a></p>\r\n","<h1>Update Profile</h1>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"mb-3 row\">\r\n        <div class=\"col-4\">\r\n            <label>Title*</label>\r\n            <select formControlName=\"title\" class=\"form-select\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['title'].errors }\">\r\n                <option value=\"\"></option>\r\n                <option value=\"Mr\">Mr</option>\r\n                <option value=\"Mrs\">Mrs</option>\r\n                <option value=\"Miss\">Miss</option>\r\n                <option value=\"Ms\">Ms</option>\r\n            </select>\r\n            <div *ngIf=\"submitted && f['title'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['title'].errors['required']\">Title is required</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-4\">\r\n            <label>First Name*</label>\r\n            <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['firstName'].errors }\" />\r\n            <div *ngIf=\"submitted && f['firstName'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['firstName'].errors['required']\">First Name is required</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-4\">\r\n            <label>Last Name*</label>\r\n            <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['lastName'].errors }\" />\r\n            <div *ngIf=\"submitted && f['lastName'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['lastName'].errors['required']\">Last Name is required</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"mb-3 row\">\r\n        <div class=\"col\">\r\n            <label>Email*</label>\r\n            <input type=\"text\" formControlName=\"email\" class=\"form-control\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['email'].errors }\" />\r\n            <div *ngIf=\"submitted && f['email'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['email'].errors['required']\">Email is required</div>\r\n                <div *ngIf=\"f['email'].errors['email']\">Email must be a valid email address</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"mb-2 row col-10\">\r\n        <div>\r\n            <label>Phone</label>\r\n            <table class=\"mb-3 col-10\">\r\n                <tr>\r\n                    <td>\r\n                        <div>\r\n                            <input type=\"text\" formControlName=\"phoneNumber\" class=\"form-control\" autocomplete=\"off\"\r\n                                autofocus=\"true\" placeholder=\"Phone number\" [maxlength]=\"10\" [minlength]=\"10\"\r\n                                [ngClass]=\"{ 'is-invalid': form.controls['phoneNumber'].hasError('phoneNumberInvalid') }\">\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n            <ng-container class=\"mb-3\" *ngIf=\"form.controls['phoneNumber'].hasError('phoneNumberInvalid')\">\r\n                <div class=\"input-warning text-danger mt-1 error robot_register_invalidPhoneNumberError\">\r\n                    Wrong phone number\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"mb-3 row\">\r\n        <div class=\"col\">\r\n            <mat-form-field appearance=\"outline\">\r\n                <mat-label>DOB</mat-label>\r\n                <input formControlName=\"dob\" #ref matInput [min]=\"DATE_FORMAT.length\" [max]=\"DATE_FORMAT.length\" [matDatepicker]=\"picker\" placeholder=\"Choose a date\" required>\r\n                <mat-hint>{{DATE_FORMAT}}</mat-hint>\r\n                <mat-datepicker-toggle matIconSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                <mat-datepicker #picker></mat-datepicker>\r\n                <mat-error *ngIf=\"f['dob'].errors\">Invalid DOB</mat-error>\r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n    <h3 class=\"pt-3\">Change Password</h3>\r\n    <p>Leave blank to keep the same password</p>\r\n    <div class=\"mb-3  row\">\r\n        <div class=\"col\">\r\n            <label>Password</label>\r\n            <input type=\"password\" formControlName=\"password\" class=\"form-control\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['password'].errors }\" />\r\n            <div *ngIf=\"submitted && f['password'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['password'].errors['required']\">Password is required</div>\r\n                <div *ngIf=\"f['password'].errors['minlength']\">Password must be at least 6 characters</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col\">\r\n            <label>Confirm Password</label>\r\n            <input type=\"password\" formControlName=\"confirmPassword\" class=\"form-control\"\r\n                [ngClass]=\"{ 'is-invalid': submitted && f['confirmPassword'].errors }\" />\r\n            <div *ngIf=\"submitted && f['confirmPassword'].errors\" class=\"invalid-feedback\">\r\n                <div *ngIf=\"f['confirmPassword'].errors['required']\">Confirm Password is required</div>\r\n                <div *ngIf=\"f['confirmPassword'].errors['mustMatch']\">Passwords must match</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"mb-3\">\r\n        <button type=\"submit\" [disabled]=\"loading\" class=\"btn btn-primary mr-2\"\r\n            [ngClass]=\"{ 'disabled': !form.valid}\">\r\n            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n            Update\r\n        </button>\r\n        <a routerLink=\"../\" href=\"\" class=\"btn btn-primary ms-2\">Back</a>\r\n    </div>\r\n</form>","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LayoutComponent } from './layout.component';\r\nimport { DetailsComponent } from './details.component';\r\nimport { UpdateComponent } from './update.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: LayoutComponent,\r\n        children: [\r\n            { path: '', component: DetailsComponent },\r\n            { path: 'update', component: UpdateComponent }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class ProfileRoutingModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport * as moment from 'moment';\r\nimport { MustMatch } from '../_helpers';\r\nimport { Schedule } from '../_models/schedule';\r\nimport { AccountService, AlertService } from '../_services';\r\nimport { Constants } from '../constants';\r\nimport { TimeHandler } from '../_helpers/time.handler';\r\n\r\n@Component({ templateUrl: 'update.component.html',\r\nstyleUrls: ['./update.component.less'], })\r\nexport class UpdateComponent implements OnInit {\r\n    DATE_FORMAT = Constants.dateFormat;\r\n    \r\n    account = this.accountService.accountValue;\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n    deleting = false;\r\n    schedules: Schedule[] = [];\r\n    id: string = this.account.id;\r\n    countryCodes: number[] = [];\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.account.dob = moment(this.account.dob).format(Constants.dateFormat);\r\n        var test = moment(this.account.dob, Constants.dateFormat).toDate();\r\n        this.form = this.formBuilder.group({\r\n            title: [this.account.title, Validators.required],\r\n            firstName: [this.account.firstName, Validators.required],\r\n            lastName: [this.account.lastName, Validators.required],\r\n            email: [this.account.email, [Validators.required, Validators.email]],\r\n            dob: [moment(this.account.dob, Constants.dateFormat).toDate(), [Validators.required]],\r\n            password: ['',  [Validators.minLength(6)]],\r\n            confirmPassword: ['',  [Validators.minLength(6)]],\r\n            phoneNumber: [this.account.phoneNumber ], // Phone number is optional\r\n\r\n        }, {\r\n            validator: [MustMatch('password', 'confirmPassword')]\r\n        });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n\r\n        this.loading = true;\r\n\r\n        // Update account from this controls\r\n        this.account.title = this.form.controls['title'].value;\r\n        this.account.firstName = this.form.controls['firstName'].value;\r\n        this.account.lastName = this.form.controls['lastName'].value;\r\n        this.account.email = this.form.controls['email'].value;\r\n\r\n        this.account.phoneNumber = this.f['phoneNumber'].value;\r\n\r\n        this.account.password = this.form.controls['password'].value;\r\n        this.account.confirmPassword = this.form.controls['confirmPassword'].value;\r\n        this.account.dob = moment(this.f['dob'].value).format(Constants.dateFormat); \r\n        this.account.schedules = this.schedules;\r\n\r\n\r\n        this.accountService.update(this.account.id, this.account)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Update successful', { keepAfterRouteChange: true });\r\n                    this.loading = false;\r\n                    //this.router.navigate(['../'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    onDelete() {\r\n        if (confirm('Are you sure?')) {\r\n            this.deleting = true;\r\n            this.accountService.delete(this.account.id)\r\n                .pipe(first())\r\n                .subscribe(() => {\r\n                    this.alertService.success('Account deleted successfully', { keepAfterRouteChange: true });\r\n                });\r\n        }\r\n    }\r\n}","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { ScheduleModule } from '../schedule/schedule.module';\r\nimport { DetailsComponent } from './details.component';\r\nimport { LayoutComponent } from './layout.component';\r\nimport { ProfileRoutingModule } from './profile-routing.module';\r\nimport { UpdateComponent } from './update.component';\r\n\r\nimport { NgxMatDatetimePickerModule } from '@angular-material-components/datetime-picker';\r\nimport { NgxMatMomentModule } from '@angular-material-components/moment-adapter';\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MatNativeDateModule, NativeDateAdapter } from '@angular/material/core';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MaterialModule } from 'src/app/material/material.module';\r\nimport { Constants } from '../constants';\r\nimport * as moment from 'moment';\r\n\r\nconst CUSTOM_MOMENT_FORMATS = {\r\n  parse: {\r\n    dateInput:  Constants.dateFormat,\r\n  },\r\n  display: {\r\n    dateInput: Constants.dateFormat,\r\n    monthYearLabel: 'MMM YYYY',\r\n    dateA11yLabel: 'LL',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n  },\r\n};\r\n// export class UserDateAdapter extends NativeDateAdapter {\r\n//   override parse(value: any): Date | null {\r\n//    //Your custom parse method \r\n//    if ((typeof value === 'string') && (value.indexOf('-') > -1) && \r\n//         value.length == 10) {\r\n//           const str = value.split('-');\r\n//           const year = Number(str[2]);\r\n//           const month = Number(str[0]) - 1;\r\n//           const date = Number(str[1]);\r\n//           var dateStr = moment(new Date(year, month, date)).format(Constants.dateFormat);\r\n//           return moment(dateStr, Constants.dateFormat).toDate();\r\n//     } else {\r\n//            return new Date(undefined);\r\n//     }\r\n//   }\r\n// }\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ProfileRoutingModule,\r\n    ScheduleModule,\r\n\r\n    MaterialModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatButtonModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    NgxMatDatetimePickerModule,\r\n    NgxMatMomentModule,\r\n    MatSelectModule,\r\n\r\n  ],\r\n  declarations: [\r\n    LayoutComponent,\r\n    DetailsComponent,\r\n    UpdateComponent\r\n  ],\r\n  providers: [\r\n    {provide: DateAdapter, useClass: /* UserDateAdapter */MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\r\n    {provide: MAT_DATE_FORMATS, useValue: CUSTOM_MOMENT_FORMATS},\r\n\r\n  ],\r\n})\r\nexport class ProfileModule { }"],"x_google_ignoreList":[]}
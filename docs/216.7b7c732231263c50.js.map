{"version":3,"file":"216.7b7c732231263c50.js","mappings":"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","names":["i0","ctx_r0","account","firstName","s_r4","userFunction","ScheduleFunctionComponent_tbody_8_tr_1_Template","ScheduleFunctionComponent_tbody_8_tr_2_Template","ctx_r1","userFunctions","ScheduleFunctionComponent","constructor","accountService","alertService","formBuilder","route","router","this","userFunctionIndexer","functions","submitted","isLoggedAsAdmin","isLoaded","id","accountValue","isAdmin","ngOnInit","form","group","function","Validators","required","functionValidator","getById","pipe","first","subscribe","next","getTasks","value","slice","console","log","get","setValue","length","parseInt","error","f","controls","control","invalidFunction","role","Role","Admin","static","t","i1","i2","i3","core","Xpm","selectors","decls","vars","consts","template","rf","ctx","ScheduleFunctionComponent_div_0_Template","ScheduleFunctionComponent_tbody_8_Template","ScheduleLayoutComponent","ScheduleListComponent","ScheduleListComponent_label_3_Template","ScheduleListComponent_td_7_Template","item_r18","date","scheduleGroup","ScheduleComponent_div_5_option_6_span_1_Template","ScheduleComponent_div_5_option_6_span_2_Template","ScheduleComponent_div_5_option_6_Template","poolElements","schedule_r23","schedule_r24","schedule_r25","$event","restoredCtx","_r31","row_r28","$implicit","i_r26","index","schedule_r27","ctx_r30","onDeleteSchedule","ScheduleComponent_mat_cell_34_span_2_Template","_c1","ctx_r12","isScheduleFromPast","deleting","row_r32","_r35","hovered","_r33","ctx_r37","onRowSelected","_c2","COLUMNS_SCHEMA","key","type","label","VALID_TO_SERVICE_TIMEOUT","routes","path","component","children","ScheduleComponent","cdr","CLEANER_STR","Constants","schedules","addingSchedule","isAdding","Date","toISOString","isAddScheduleMode","displayedColumns","map","col","columnsSchema","color","connection","signalR","configureLogging","Information","withUrl","environment","baseUrl","build","start","then","catch","err","toString","on","updateSchedulesAndPoolFromServer","ngAfterViewInit","initSchedules","sort","getAvailableSchedules","pollElements","schedulePoolElements","fixUpPoolDateStrings","getConcatPoolElement","availableSchedule4Function","allDates","poolElement","ngOnDestroy","stop","applyFilter","input","filterValue","trim","toLowerCase","dataSource","filter","onCheckboxChange","event","onAddAvailableSchedule","clear","invalid","schedule","createScheduleFromAvailableDateString","getScheduleFromPool","complete","scheduleId","indx","schedule2Delete","moveSchedule2Pool","localNowMs","getTime","scheduleLocalDateMs","moment","local","toDate","push","fixUpScheduleDateStrings","MatTableDataSource","paginator","forEach","element","dateTimeStr","format","dateTimeFormat","dateFormControlName","array","split","formDateStr","formFunction","cleanerGroup","formMs","parse","scheduleMs","scheduleFunction","warn","accountId","newDate","dob","userAvailability","newUserFunction","now","tr","viewQuery","MatSort","ScheduleComponent_div_0_Template","ScheduleComponent_div_5_Template","ScheduleComponent_span_8_Template","ScheduleComponent_div_18_Template","ScheduleComponent_mat_header_cell_24_Template","ScheduleComponent_mat_cell_25_Template","ScheduleComponent_mat_header_cell_27_Template","ScheduleComponent_mat_cell_28_Template","ScheduleComponent_mat_header_cell_30_Template","ScheduleComponent_mat_cell_31_Template","ScheduleComponent_mat_header_cell_33_Template","ScheduleComponent_mat_cell_34_Template","ScheduleComponent_mat_header_row_35_Template","ScheduleComponent_mat_row_36_Template","valid","_c3","ScheduleRoutingModule","oAB","cJS","RouterModule","forChild"],"sourceRoot":"webpack:///","sources":["./src/app/schedule/schedule-function.component.html","./src/app/schedule/schedule-function.component.ts","./src/app/schedule/schedule-layout.component.ts","./src/app/schedule/schedule-layout.component.html","./src/app/schedule/schedule-list.component.html","./src/app/schedule/schedule-list.component.ts","./src/app/schedule/schedule.component.html","./src/app/schedule/schedule.component.ts","./src/app/schedule/schedule-routing.module.ts"],"sourcesContent":["<div class=\"mb-3 col\" *ngIf=\"isLoaded\">\r\n    <label>Duties of {{account.firstName}}</label>\r\n</div>\r\n<form [formGroup]=\"form\" class=\"card-body\">\r\n    <div class=\"border border-primary mb-2\">\r\n        <table class=\"table table-striped\">\r\n            <thead>\r\n                <tr>\r\n                    <th style=\"width:20%\">Duty</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody *ngIf=\"functions\">\r\n                <tr *ngFor=\"let s of userFunctions\">\r\n                    <td>{{s.userFunction}} </td>\r\n                </tr>\r\n                <tr *ngIf=\"!userFunctions\">\r\n                    <td colspan=\"4\" class=\"text-center\">\r\n                        <span class=\"spinner-border spinner-border-lg align-center\"></span>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    <div class=\"mb-3\">\r\n        <a routerLink=\"/schedule\" class=\"btn btn-primary\">Back</a>\r\n    </div>\r\n</form>","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Account, Role } from '../_models';\r\nimport { UserFunction } from '../_models/userfunction';\r\nimport { AccountService, AlertService } from '../_services';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Component({ templateUrl: 'schedule-function.component.html' })\r\nexport class ScheduleFunctionComponent implements OnInit {\r\n  id: string;\r\n  account: Account;\r\n  form: FormGroup;\r\n  userFunctionIndexer: number = 0;\r\n\r\n  userFunctions: UserFunction[] = null;\r\n  functions: string[] = [];\r\n  submitted = false;\r\n  isLoggedAsAdmin: boolean = false;\r\n\r\n  isLoaded: boolean = false;\r\n  constructor(private accountService: AccountService,\r\n    private alertService: AlertService,\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router) {\r\n\r\n    this.id = this.accountService.accountValue.id;\r\n\r\n    this.isLoggedAsAdmin = this.accountService.isAdmin();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.formBuilder.group({\r\n      function: ['', [Validators.required, this.functionValidator]],\r\n    });\r\n\r\n    this.accountService.getById(this.id)\r\n      .pipe(first())\r\n      .subscribe({\r\n          next: (account) => {\r\n            this.account = account;\r\n            this.isLoaded = true;\r\n            this.accountService.getTasks()\r\n            .pipe(first())\r\n            .subscribe({\r\n              next: (value: any) => {\r\n                this.functions = value;\r\n\r\n                this.userFunctions = account.userFunctions.slice();\r\n\r\n                console.log(this.account + this.id);\r\n                this.form.get('function').setValue(this.functions[0]);\r\n\r\n                this.userFunctionIndexer = account.userFunctions.length > 0 ? parseInt(account.userFunctions[account.userFunctions.length - 1].id) : 0;\r\n              },\r\n              error: error => {\r\n                this.alertService.error(error);\r\n              }\r\n            });\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n        }\r\n      });\r\n  }\r\n  // convenience getter for easy access to form fields\r\n  get f() { return this.form.controls; }\r\n\r\n  functionValidator(control: FormControl): { [s: string]: boolean } {\r\n    if (control.value === '') {\r\n      return { invalidFunction: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  get isAdmin() {\r\n    return this.account.role == Role.Admin;\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({selector: 'schedule-layout-component', templateUrl: 'schedule-layout.component.html' })\r\nexport class ScheduleLayoutComponent { }","<!-- <app-nav-schedule></app-nav-schedule> -->\r\n<div class=\"p-4\">\r\n    <div class=\"container\">\r\n        <router-outlet></router-outlet>\r\n    </div>\r\n</div>","\r\n<h1>User Properties</h1>\r\n<div class=\"mb-3 col\">\r\n    <label *ngIf=\"account\">Choose Property for {{account.firstName}}</label>\r\n</div>\r\n<table class=\"table table-striped\">\r\n    <tbody>\r\n        <tr >\r\n            <td style=\"white-space: nowrap\" *ngIf=\"account\">\r\n                <a routerLink=\"function/{{account.id}}\" class=\"btn btn-sm btn-primary mr-2\" >Duties</a>\r\n                &nbsp;\r\n                <a routerLink=\"schedules/{{account.id}}\" class=\"btn btn-sm btn-primary mr-2\">Schedules</a>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n    <div class=\"mb-3\">\r\n        <a routerLink=\"/profile\" class=\"btn btn-link\">Back</a>\r\n    </div>\r\n\r\n</table>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService } from '../_services';\r\nimport { Account } from '../_models';\r\n\r\n@Component({ templateUrl: 'schedule-list.component.html' })\r\nexport class ScheduleListComponent implements OnInit {\r\n    //accounts: any[];\r\n    account = this.accountService.accountValue;\r\n    constructor(private accountService: AccountService) {}\r\n\r\n    ngOnInit() {\r\n        if (this.account) {\r\n            console.log(this.account.firstName);\r\n        } else {\r\n            console.log(\"account is NULL\");\r\n        }\r\n    }\r\n\r\n}","<div class=\"mb-3 col\" *ngIf=\"isLoaded\">\r\n    <label>Schedules for {{account.firstName}}</label>\r\n</div>\r\n<form [formGroup]=\"form\">\r\n    <fieldset>\r\n        <legend>Available Dates:</legend>\r\n        <div *ngIf=\"!isLoggedAsAdmin\">\r\n            <div class=\"col\">\r\n                <label>Date/Time</label>\r\n                <select #element formControlName=\"availableSchedule4Function\" class=\"form-select\">\r\n                    <option *ngFor=\"let item of poolElements\">\r\n                        <span *ngIf='item.userFunction === \"Cleaner\"' class=\"spinner-border spinner-border-sm mr-1\">\r\n                            {{ item.date }}/{{ item.userFunction }}/{{ item.scheduleGroup }}\r\n                        </span>\r\n                        <span *ngIf='item.userFunction !=\"Cleaner\"' class=\"spinner-border spinner-border-sm mr-1\">\r\n                            {{ item.date }}/{{ item.userFunction }}\r\n                        </span>\r\n                    </option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n        <br>\r\n        <button type=\"button\" (click)=\"onAddAvailableSchedule()\" class=\"btn btn-primary\"\r\n            [ngClass]=\"{ 'disabled': !form.controls['availableSchedule4Function'].valid || poolElements.length <= 0 || isAdding}\">\r\n            <span *ngIf=\"isAdding\" class=\"spinner-border spinner-border-sm mr-1\"></span> Add\r\n        </button>\r\n    </fieldset>\r\n\r\n    <fieldset>\r\n        <legend>Assigned Dates:</legend>\r\n        <input type=\"checkbox\" (change)=\"onCheckboxChange($event)\" formControlName=\"allDates\" id=\"allDates\"\r\n            name=\"allDates\" value=\"\">\r\n        <label for=\"allDates\" class=\"ps-2\">All</label><br>\r\n    </fieldset>\r\n</form>\r\n\r\n<br>\r\n\r\n<div class=\"d-flex justify-content-center\" *ngIf=\"!account\">\r\n    <span class=\"spinner-border spinner-border-lg align-center\"></span>\r\n</div>\r\n\r\n<div class=\"color-sample mat-elevation-z3 mb-2\" [style.background-color]=\"color\">\r\n    <div class=\"border\">\r\n        <mat-table #table [dataSource]=\"dataSource\" matSort>\r\n            <ng-container matColumnDef=\"date\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header> Date/Time </mat-header-cell>\r\n                <mat-cell *matCellDef=\"let schedule\">{{schedule.date}}\r\n                </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"userFunction\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header> Duty </mat-header-cell>\r\n                <mat-cell *matCellDef=\"let schedule\">{{schedule.userFunction}}\r\n                </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"scheduleGroup\">\r\n                <mat-header-cell *matHeaderCellDef mat-sort-header> Team </mat-header-cell>\r\n                <mat-cell *matCellDef=\"let schedule\">{{schedule.scheduleGroup}}\r\n                </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"action\">\r\n                <mat-header-cell *matHeaderCellDef> Action </mat-header-cell>\r\n                <mat-cell *matCellDef=\"let i = index; let schedule; let row\">\r\n                    <button class=\"btn btn-sm btn-danger btn-delete-account\" type=\"button\"\r\n                        (click)=\"onDeleteSchedule($event, row, i, schedule)\"\r\n                        [ngClass]=\"{ 'disabled': isScheduleFromPast(row) || row.deleting}\">\r\n                        <span *ngIf=\"row.deleting\" class=\"spinner-border spinner-border-sm mr-1\"></span> Delete\r\n                    </button>\r\n                </mat-cell>\r\n            </ng-container>\r\n            <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n            <mat-row *matRowDef=\"let row; columns: displayedColumns;\" [ngClass]=\"{hovered: row.hovered}\"\r\n                (mouseover)=\"row.hovered = true\" (mouseout)=\"row.hovered = false\" #tr (click)=\"onRowSelected(row, tr)\">\r\n            </mat-row>\r\n        </mat-table>\r\n\r\n        <mat-paginator #paginator [length]=\"schedules.length\" [pageSizeOptions]=\"[5, 10, 30, 50]\" showFirstLastButtons>\r\n        </mat-paginator>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"mb-3\">\r\n    <a routerLink=\"/schedule\" disabled=\"false\" class=\"btn btn-primary\">Back</a>\r\n</div>\r\n<div class=\"row mt-3\"></div>","import { AfterViewInit, ChangeDetectorRef, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort, MatSortable } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as signalR from '@microsoft/signalr';\r\nimport * as moment from 'moment';\r\nimport { first } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Account, Role } from '../_models';\r\nimport { Schedule } from '../_models/schedule';\r\nimport { SchedulePoolElement } from '../_models/schedulepoolelement';\r\nimport { UserFunction } from '../_models/userfunction';\r\nimport { AccountService, AlertService } from '../_services';\r\nimport { Constants } from '../constants';\r\n\r\nconst COLUMNS_SCHEMA = [\r\n  {\r\n    key: \"date\",\r\n    type: \"Date\",\r\n    label: \"DateTime\"\r\n  },\r\n  {\r\n    key: \"userFunction\",\r\n    type: \"text\",\r\n    label: \"Duty\"\r\n  },\r\n  {\r\n    key: \"scheduleGroup\",\r\n    type: \"text\",\r\n    label: \"Group\"\r\n  },\r\n  {\r\n    key: \"action\",\r\n    type: \"button\",\r\n    label: \"Action\"\r\n  },\r\n]\r\n\r\nconst VALID_TO_SERVICE_TIMEOUT = 1000 * 60 * 60 * 24; // 1 DAY\r\n\r\n@Component({\r\n  selector: 'app-schedule',\r\n  templateUrl: './schedule.component.html',\r\n  styleUrls: ['./schedule.component.less']\r\n})\r\nexport class ScheduleComponent implements OnInit, AfterViewInit {\r\n  @ViewChild('paginator') paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  readonly CLEANER_STR = Constants.CLEANER_STR;\r\n  // dateFormat = `${environment.dateTimeFormat}`;\r\n  // dateTimeFormat = `${environment.dateTimeFormat}`;\r\n\r\n\r\n  form: FormGroup;\r\n  id: string;\r\n\r\n  schedules: Schedule[] = [];\r\n  userFunctionIndexer: number = 0;\r\n  functions: string[] = [];\r\n  submitted = false;\r\n  accountService: AccountService;\r\n  account: Account;\r\n  isLoaded: boolean = false;\r\n  addingSchedule: boolean = false;\r\n  userFunctions: UserFunction[] = [];\r\n  isAdding: boolean = false;\r\n\r\n  isLoggedAsAdmin: boolean = false;\r\n\r\n  date: string = new Date().toISOString().slice(0, 16);\r\n\r\n  poolElements: SchedulePoolElement[] = [];\r\n  isAddScheduleMode: boolean = false;\r\n\r\n  dataSource: MatTableDataSource<Schedule>;\r\n  displayedColumns: string[] = COLUMNS_SCHEMA.map((col) => col.key);\r\n  columnsSchema: any = COLUMNS_SCHEMA;\r\n  public color: ThemePalette = 'primary';\r\n  connection: signalR.HubConnection;\r\n\r\n  constructor(accountService: AccountService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private alertService: AlertService,\r\n    private cdr: ChangeDetectorRef) {\r\n\r\n    this.accountService = accountService;\r\n    this.id = this.accountService.accountValue.id;\r\n\r\n    this.isLoggedAsAdmin = this.accountService.isAdmin();\r\n\r\n\r\n    var tempStr = environment.baseUrl;\r\n    this.connection = new signalR.HubConnectionBuilder()\r\n      .configureLogging(signalR.LogLevel.Information)\r\n      .withUrl(environment.baseUrl + '/update')\r\n      .build();\r\n\r\n    this.connection.start().then(function () {\r\n      console.log('SignalR Connected!');\r\n    }).catch(function (err) {\r\n      return console.error(err.toString());\r\n    });\r\n\r\n    this.connection.on(\"SendUpdate\", (id: number) => {\r\n      if (id != parseInt(this.id)) {\r\n        console.log(\"Error\");\r\n      }\r\n      /* TODO This used to cause a call to `GetById(int id)` with the id different then this.id \r\n      Currently I am testing if this is still a problem after fix has been applied*/\r\n      this.updateSchedulesAndPoolFromServer(); \r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    // Get the account for this id \r\n    this.accountService.getById(this.id)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (account) => {\r\n\r\n          this.accountService.getTasks()\r\n            .pipe(first())\r\n            .subscribe({\r\n              next: (value) => {\r\n                this.functions = value;\r\n\r\n                this.initSchedules(account);\r\n\r\n                // Initial sorting by date\r\n                this.sort.sort(({ id: 'date', start: 'asc' }) as MatSortable);\r\n\r\n                this.isLoaded = true;\r\n\r\n                this.userFunctions = account.userFunctions.slice();\r\n\r\n                this.account = account;\r\n\r\n                this.userFunctionIndexer = account.userFunctions.length > 0 ? parseInt(account.userFunctions[account.userFunctions.length - 1].id) : 0;\r\n\r\n                var aDateValid = this.form.controls['availableSchedule4Function'].valid;\r\n                this.accountService.getAvailableSchedules(account.id)\r\n                  .pipe(first())\r\n                  .subscribe({\r\n                    next: (pollElements) => {\r\n                      this.poolElements = pollElements.schedulePoolElements;\r\n                      this.fixUpPoolDateStrings();\r\n                      if (this.poolElements.length != 0) {\r\n                        this.form.get('availableSchedule4Function').setValue(this.getConcatPoolElement(this.poolElements[0]));\r\n                      }\r\n\r\n                    },\r\n                    error: error => {\r\n                      this.alertService.error(error);\r\n                    }\r\n                  });\r\n              },\r\n              error: (error: any) => {\r\n                this.alertService.error(error);\r\n              }\r\n            });\r\n\r\n        },\r\n        error: (error: any) => {\r\n          this.alertService.error(error);\r\n        }\r\n      })\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.isAddScheduleMode = this.isLoggedAsAdmin; // If not admin then we are adding available dates\r\n\r\n    this.form = this.formBuilder.group({\r\n      availableSchedule4Function: ['',],\r\n      allDates: [false, '',]\r\n    });\r\n  }\r\n\r\n  private getConcatPoolElement(poolElement: SchedulePoolElement): string {\r\n    if (this.poolElements[0].userFunction == this.CLEANER_STR) {\r\n      return poolElement.date + \"/\" + poolElement.userFunction + \"/\" + poolElement.scheduleGroup;\r\n    } else {\r\n      return poolElement.date + \"/\" + poolElement.userFunction;\r\n    }\r\n  }\r\n\r\n\r\n  ngOnDestroy() {\r\n    console.log(\"Called\");\r\n    this.connection.stop();\r\n  }\r\n  /* I am not sure if we need 'input' parameter - keep it for now*/\r\n  applyFilter(t: any, input: any) {\r\n    const target = t as HTMLTextAreaElement;\r\n    var filterValue = target.value;\r\n    filterValue = filterValue.trim(); // Remove whitespace\r\n    filterValue = filterValue.toLowerCase(); // Datasource defaults to lowercase matches\r\n    this.dataSource.filter = filterValue;\r\n  }\r\n\r\n  onCheckboxChange(event: any) {\r\n    this.updateSchedulesAndPoolFromServer();\r\n  }\r\n\r\n  functionValidator(control: FormControl): { [s: string]: boolean } {\r\n    if (control.value === '') {\r\n      return { invalidFunction: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() { return this.form.controls; }\r\n\r\n  onAddAvailableSchedule() {\r\n\r\n    this.submitted = true;\r\n    this.addingSchedule = true;\r\n\r\n    // reset alerts on submit\r\n    this.alertService.clear();\r\n\r\n    /* Test\r\n    var aDateValid = this.form.controls['availableSchedule4Function'].valid;\r\n    */\r\n\r\n    // stop here if form is invalid\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n\r\n    var schedule = this.createScheduleFromAvailableDateString('availableSchedule4Function');\r\n    if (schedule == null) {\r\n      return;\r\n    }\r\n\r\n    this.isAdding = true;\r\n    this.accountService.getScheduleFromPool(this.account.id, schedule)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (account) => {\r\n          this.addingSchedule = false;\r\n\r\n          console.log(account);\r\n          this.initSchedules(account);\r\n\r\n\r\n          if (this.poolElements.length != 0) {\r\n            this.form.get('availableSchedule4Function').setValue(this.getConcatPoolElement(this.poolElements[0]));\r\n          }\r\n          this.updateSchedulesAndPoolFromServer();\r\n        },\r\n        complete: () => {\r\n          this.isAdding = false;\r\n        },\r\n        error: error => {\r\n          this.addingSchedule = false;\r\n          this.alertService.error(error);\r\n          this.isAdding = false;\r\n          this.updateSchedulesAndPoolFromServer();\r\n        }\r\n      });\r\n  }\r\n  onDeleteSchedule(event: any, scheduleId: string, indx: string, schedule2Delete: Schedule) { // i is schedule index\r\n    schedule2Delete.deleting = true;\r\n    this.accountService.moveSchedule2Pool(this.account.id, schedule2Delete)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (account) => {\r\n          this.updateSchedulesAndPoolFromServer();\r\n\r\n          this.schedules = account.schedules;\r\n          schedule2Delete.deleting = false;\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n          this.updateSchedulesAndPoolFromServer();\r\n          schedule2Delete.deleting = false;\r\n        }\r\n      });\r\n\r\n  }\r\n\r\n\r\n  updateSchedulesAndPoolFromServer() {\r\n    this.accountService.getById(this.id)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (account) => {\r\n          this.initSchedules(account);\r\n\r\n          this.accountService.getAvailableSchedules(account.id)\r\n            .pipe(first())\r\n            .subscribe({\r\n              next: (pollElements) => {\r\n                console.log(\"Pool Elements:\" + pollElements);\r\n                this.poolElements = pollElements.schedulePoolElements;\r\n                \r\n                this.fixUpPoolDateStrings();\r\n\r\n                if (this.poolElements.length != 0) {\r\n                  this.form.get('availableSchedule4Function').setValue(this.getConcatPoolElement(this.poolElements[0]));\r\n                }\r\n              },\r\n              error: error => {\r\n                this.alertService.error(error);\r\n              }\r\n            });\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n        }\r\n      });\r\n  }\r\n  initSchedules(account: Account) {\r\n\r\n    var schedules: Schedule[] = [];\r\n\r\n    var dLocalNow = new Date();\r\n    var localNowMs = dLocalNow.getTime();\r\n    //  Filter out values that are older then now if checkbox this.f['allDates'].value is false\r\n    for (let index = 0; index < account.schedules.length; index++) {\r\n      const schedule = account.schedules[index];\r\n      var serverDate = schedule.date;\r\n      var serverDateStr = serverDate.toString();\r\n\r\n      var scheduleLocalDate = moment(moment.utc(schedule.date)).local().toDate(); // NEW CODE\r\n      var scheduleLocalDateMs = scheduleLocalDate.getTime(); // NEW CODE\r\n\r\n      // Check the schedule is at least 1 day before now\r\n      if (this.f['allDates'].value || (scheduleLocalDateMs - localNowMs) > VALID_TO_SERVICE_TIMEOUT) {\r\n        schedules.push(schedule);\r\n      }\r\n    }\r\n    this.schedules = schedules.slice();\r\n\r\n\r\n    // Fix up the date string for the schedules\r\n    this.fixUpScheduleDateStrings();\r\n\r\n\r\n    this.dataSource = new MatTableDataSource(this.schedules);\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n\r\n  // Fix up the date string for the pools\r\n  private fixUpPoolDateStrings() {\r\n    this.poolElements.forEach(element => {\r\n      var date = new Date(element.date);\r\n      var dateTimeStr = moment(date).format(Constants.dateTimeFormat);\r\n      element.date = dateTimeStr;\r\n    });\r\n  }\r\n\r\n  // Fix up the date string for the schedules\r\n  private fixUpScheduleDateStrings() {\r\n    this.schedules.forEach(element => {\r\n      var date = new Date(element.date);\r\n      var dateTimeStr = moment(date).format(Constants.dateTimeFormat);\r\n      element.date = dateTimeStr;\r\n    });\r\n  }\r\n\r\n\r\n  createScheduleFromAvailableDateString(dateFormControlName: string): Schedule {\r\n    var dateAndFuncStr = this.form.controls[dateFormControlName].value;\r\n    const array = dateAndFuncStr.split(\"/\");\r\n\r\n    var formDateStr = array[0];\r\n    var formFunction = array[1];\r\n    var cleanerGroup = array[2];\r\n\r\n    var formMs = Date.parse(array[0]);\r\n    for (let index = 0; index < this.schedules.length; index++) {\r\n      var scheduleMs = new Date(this.schedules[index].date).getTime();\r\n      var scheduleFunction = this.schedules[index].userFunction;\r\n      if (scheduleMs == formMs && scheduleFunction == formFunction) {\r\n        this.alertService.warn(\"You are already \" + scheduleFunction + \" for that date/time\");\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var schedule: Schedule = {\r\n      accountId: this.account.id,\r\n      date: formDateStr,\r\n      newDate: formDateStr,\r\n      dob: this.account.dob,\r\n      required: true,\r\n      deleting: false,\r\n      userAvailability: true,\r\n      scheduleGroup: cleanerGroup,\r\n      userFunction: formFunction,\r\n      newUserFunction: formFunction\r\n    }\r\n    return schedule;\r\n  }\r\n\r\n  isScheduleFromPast(schedule: Schedule) {\r\n    var scheduleLocalDate = moment(moment.utc(schedule.date)).local().toDate(); // NEW CODE\r\n    var scheduleLocalDateMs = scheduleLocalDate.getTime(); // NEW CODE \r\n\r\n    var localNowMs = Date.now();\r\n    if ((scheduleLocalDateMs - localNowMs) < VALID_TO_SERVICE_TIMEOUT) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  onRowSelected(schedule: Schedule, tr: any) {\r\n  }\r\n\r\n  get isAdmin() {\r\n    return this.account.role == Role.Admin;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { FunctionComponent } from '../admin/accounts/function.component';\r\nimport { SubNavComponent } from '../admin/subnav.component';\r\nimport { NavScheduleComponent } from './nav-schedule.component';\r\nimport { ScheduleFunctionComponent } from './schedule-function.component';\r\nimport { ScheduleLayoutComponent } from './schedule-layout.component';\r\nimport { ScheduleListComponent } from './schedule-list.component';\r\nimport { ScheduleComponent } from './schedule.component';\r\n\r\nconst routes: Routes = [\r\n  \r\n  //{ path: 'nav', component: ScheduleLayoutComponent },\r\n  {\r\n    path: '',  component:  ScheduleLayoutComponent , \r\n    children: [\r\n      { path: '', component: ScheduleListComponent },\r\n      { path: 'function/:id', component: ScheduleFunctionComponent },\r\n      { path: 'schedules/:id', component: ScheduleComponent },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ScheduleRoutingModule { }\r\n"],"x_google_ignoreList":[]}
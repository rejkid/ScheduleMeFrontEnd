{"version":3,"file":"394.ba49c8da705393c6.js","mappings":"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","names":["ScheduleModule","static","this","t","_angular_core__WEBPACK_IMPORTED_MODULE_1__","oAB","cJS","CommonModule","RouterModule","ReactiveFormsModule","ScheduleRoutingModule","MaterialModule","MatSortModule","MatTableModule","MatPaginatorModule","MatButtonModule","MatDatepickerModule","MatNativeDateModule","MatInputModule","MatFormFieldModule","NgxMatDatetimePickerModule","NgxMatMomentModule","MatSelectModule","moment","_rollupMoment__default","_rollupMoment","NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS","InjectionToken","providedIn","factory","NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY","useUtc","range","length","valueFunction","valuesArray","Array","i","NgxMatMomentAdapter","NgxMatDateAdapter","constructor","dateLocale","_options","super","setLocale","locale","momentLocaleData","localeData","_localeData","firstDayOfWeek","longMonths","months","shortMonths","monthsShort","dates","createDate","format","longDaysOfWeek","weekdays","shortDaysOfWeek","weekdaysShort","narrowDaysOfWeek","weekdaysMin","getYear","date","clone","year","getMonth","month","getDate","getDayOfWeek","day","getMonthNames","style","getDateNames","getDayOfWeekNames","getYearName","getFirstDayOfWeek","getNumDaysInMonth","daysInMonth","Error","result","_createMoment","isValid","today","parse","value","parseFormat","displayFormat","addCalendarYears","years","add","addCalendarMonths","addCalendarDays","days","toIso8601","deserialize","Date","isDateInstance","ISO_8601","obj","isMoment","invalid","getHour","hours","getMinute","minutes","getSecond","seconds","setHour","setMinute","setSecond","strict","utc","ɵfac","i0","MAT_DATE_LOCALE","ɵprov","token","DEFAULT_DATE_INPUT","NGX_MAT_MOMENT_FORMATS","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","NgxMomentDateModule","ɵmod","type","ɵinj","providers","provide","useClass","deps","NGX_MAT_DATE_FORMATS","useValue","imports","MAT_MOMENT_DATE_ADAPTER_OPTIONS","MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY","MomentDateAdapter","DateAdapter"],"sourceRoot":"webpack:///","sources":["./src/app/schedule/schedule.module.ts","./node_modules/@angular-material-components/moment-adapter/fesm2020/angular-material-components-moment-adapter.mjs","./node_modules/@angular/material-moment-adapter/fesm2020/material-moment-adapter.mjs"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { NavScheduleComponent } from './nav-schedule.component';\r\nimport { ScheduleFunctionComponent } from './schedule-function.component';\r\nimport { ScheduleLayoutComponent } from './schedule-layout.component';\r\nimport { ScheduleListComponent } from './schedule-list.component';\r\nimport { ScheduleRoutingModule } from './schedule-routing.module';\r\nimport { ScheduleComponent } from './schedule.component';\r\n\r\nimport { NgxMatDatetimePickerModule } from '@angular-material-components/datetime-picker';\r\nimport { NgxMatMomentModule } from '@angular-material-components/moment-adapter';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MaterialModule } from 'src/app/material/material.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ScheduleComponent,\r\n    ScheduleListComponent,\r\n    ScheduleFunctionComponent,\r\n    ScheduleLayoutComponent,\r\n    NavScheduleComponent\r\n  ],\r\n  imports: [\r\n    CommonModule ,\r\n    RouterModule,\r\n    ReactiveFormsModule,\r\n    ScheduleRoutingModule,\r\n    RouterModule,\r\n\r\n    MaterialModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatButtonModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    NgxMatDatetimePickerModule,\r\n    NgxMatMomentModule,\r\n    MatSelectModule,\r\n\r\n  ],\r\n  exports: [ScheduleComponent],\r\n  providers: [\r\n\r\n  ],\r\n})\r\nexport class ScheduleModule { }\r\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\nimport { NgxMatDateAdapter, NGX_MAT_DATE_FORMATS } from '@angular-material-components/datetime-picker';\n\nconst moment = _rollupMoment__default || _rollupMoment;\r\n/** InjectionToken for moment date adapter to configure options. */\r\nconst NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken('NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\r\n    providedIn: 'root',\r\n    factory: NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY\r\n});\r\n/** @docs-private */\r\nfunction NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\r\n    return {\r\n        useUtc: false\r\n    };\r\n}\r\n/** Creates an array and fills it with values. */\r\nfunction range(length, valueFunction) {\r\n    const valuesArray = Array(length);\r\n    for (let i = 0; i < length; i++) {\r\n        valuesArray[i] = valueFunction(i);\r\n    }\r\n    return valuesArray;\r\n}\r\n/** Adapts Moment.js Dates for use with Angular Material. */\r\nclass NgxMatMomentAdapter extends NgxMatDateAdapter {\r\n    constructor(dateLocale, _options) {\r\n        super();\r\n        this._options = _options;\r\n        this.setLocale(dateLocale || moment.locale());\r\n    }\r\n    setLocale(locale) {\r\n        super.setLocale(locale);\r\n        let momentLocaleData = moment.localeData(locale);\r\n        this._localeData = {\r\n            firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\r\n            longMonths: momentLocaleData.months(),\r\n            shortMonths: momentLocaleData.monthsShort(),\r\n            dates: range(31, (i) => this.createDate(2017, 0, i + 1).format('D')),\r\n            longDaysOfWeek: momentLocaleData.weekdays(),\r\n            shortDaysOfWeek: momentLocaleData.weekdaysShort(),\r\n            narrowDaysOfWeek: momentLocaleData.weekdaysMin(),\r\n        };\r\n    }\r\n    getYear(date) {\r\n        return this.clone(date).year();\r\n    }\r\n    getMonth(date) {\r\n        return this.clone(date).month();\r\n    }\r\n    getDate(date) {\r\n        return this.clone(date).date();\r\n    }\r\n    getDayOfWeek(date) {\r\n        return this.clone(date).day();\r\n    }\r\n    getMonthNames(style) {\r\n        // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\r\n        return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\r\n    }\r\n    getDateNames() {\r\n        return this._localeData.dates;\r\n    }\r\n    getDayOfWeekNames(style) {\r\n        if (style == 'long') {\r\n            return this._localeData.longDaysOfWeek;\r\n        }\r\n        if (style == 'short') {\r\n            return this._localeData.shortDaysOfWeek;\r\n        }\r\n        return this._localeData.narrowDaysOfWeek;\r\n    }\r\n    getYearName(date) {\r\n        return this.clone(date).format('YYYY');\r\n    }\r\n    getFirstDayOfWeek() {\r\n        return this._localeData.firstDayOfWeek;\r\n    }\r\n    getNumDaysInMonth(date) {\r\n        return this.clone(date).daysInMonth();\r\n    }\r\n    clone(date) {\r\n        return date.clone().locale(this.locale);\r\n    }\r\n    createDate(year, month, date) {\r\n        // Moment.js will create an invalid date if any of the components are out of bounds, but we\r\n        // explicitly check each case so we can throw more descriptive errors.\r\n        if (month < 0 || month > 11) {\r\n            throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n        }\r\n        if (date < 1) {\r\n            throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n        }\r\n        const result = this._createMoment({ year, month, date }).locale(this.locale);\r\n        // If the result isn't valid, the date must have been out of bounds for this month.\r\n        if (!result.isValid()) {\r\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n        }\r\n        return result;\r\n    }\r\n    today() {\r\n        return this._createMoment().locale(this.locale);\r\n    }\r\n    parse(value, parseFormat) {\r\n        if (value && typeof value == 'string') {\r\n            return this._createMoment(value, parseFormat, this.locale);\r\n        }\r\n        return value ? this._createMoment(value).locale(this.locale) : null;\r\n    }\r\n    format(date, displayFormat) {\r\n        date = this.clone(date);\r\n        if (!this.isValid(date)) {\r\n            throw Error('MomentDateAdapter: Cannot format invalid date.');\r\n        }\r\n        return date.format(displayFormat);\r\n    }\r\n    addCalendarYears(date, years) {\r\n        return this.clone(date).add({ years });\r\n    }\r\n    addCalendarMonths(date, months) {\r\n        return this.clone(date).add({ months });\r\n    }\r\n    addCalendarDays(date, days) {\r\n        return this.clone(date).add({ days });\r\n    }\r\n    toIso8601(date) {\r\n        return this.clone(date).format();\r\n    }\r\n    /**\r\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\r\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\r\n     * string into null. Returns an invalid date for all other values.\r\n     */\r\n    deserialize(value) {\r\n        let date;\r\n        if (value instanceof Date) {\r\n            date = this._createMoment(value).locale(this.locale);\r\n        }\r\n        else if (this.isDateInstance(value)) {\r\n            // Note: assumes that cloning also sets the correct locale.\r\n            return this.clone(value);\r\n        }\r\n        if (typeof value === 'string') {\r\n            if (!value) {\r\n                return null;\r\n            }\r\n            date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\r\n        }\r\n        if (date && this.isValid(date)) {\r\n            return this._createMoment(date).locale(this.locale);\r\n        }\r\n        return super.deserialize(value);\r\n    }\r\n    isDateInstance(obj) {\r\n        return moment.isMoment(obj);\r\n    }\r\n    isValid(date) {\r\n        return this.clone(date).isValid();\r\n    }\r\n    invalid() {\r\n        return moment.invalid();\r\n    }\r\n    getHour(date) {\r\n        return date.hours();\r\n    }\r\n    getMinute(date) {\r\n        return date.minutes();\r\n    }\r\n    getSecond(date) {\r\n        return date.seconds();\r\n    }\r\n    setHour(date, value) {\r\n        date.hours(value);\r\n    }\r\n    setMinute(date, value) {\r\n        date.minutes(value);\r\n    }\r\n    setSecond(date, value) {\r\n        date.seconds(value);\r\n    }\r\n    /** Creates a Moment instance while respecting the current UTC settings. */\r\n    _createMoment(date, format, locale) {\r\n        const { strict, useUtc } = this._options || {};\r\n        return useUtc\r\n            ? moment.utc(date, format, locale, strict)\r\n            : moment(date, format, locale, strict);\r\n    }\r\n}\r\n/** @nocollapse */ NgxMatMomentAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatMomentAdapter, deps: [{ token: MAT_DATE_LOCALE, optional: true }, { token: NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ NgxMatMomentAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatMomentAdapter });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatMomentAdapter, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [MAT_DATE_LOCALE]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS]\r\n                }] }]; } });\n\nconst DEFAULT_DATE_INPUT = 'l, LTS';\r\nconst NGX_MAT_MOMENT_FORMATS = {\r\n    parse: {\r\n        dateInput: DEFAULT_DATE_INPUT,\r\n    },\r\n    display: {\r\n        dateInput: DEFAULT_DATE_INPUT,\r\n        monthYearLabel: 'MMM YYYY',\r\n        dateA11yLabel: 'LL',\r\n        monthYearA11yLabel: 'MMMM YYYY',\r\n    },\r\n};\n\nclass NgxMomentDateModule {\r\n}\r\n/** @nocollapse */ NgxMomentDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMomentDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgxMomentDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMomentDateModule });\r\n/** @nocollapse */ NgxMomentDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMomentDateModule, providers: [\r\n        {\r\n            provide: NgxMatDateAdapter,\r\n            useClass: NgxMatMomentAdapter,\r\n            deps: [MAT_DATE_LOCALE, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS]\r\n        }\r\n    ] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMomentDateModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    providers: [\r\n                        {\r\n                            provide: NgxMatDateAdapter,\r\n                            useClass: NgxMatMomentAdapter,\r\n                            deps: [MAT_DATE_LOCALE, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS]\r\n                        }\r\n                    ],\r\n                }]\r\n        }] });\r\nclass NgxMatMomentModule {\r\n}\r\n/** @nocollapse */ NgxMatMomentModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatMomentModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgxMatMomentModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatMomentModule, imports: [NgxMomentDateModule] });\r\n/** @nocollapse */ NgxMatMomentModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatMomentModule, providers: [{ provide: NGX_MAT_DATE_FORMATS, useValue: NGX_MAT_MOMENT_FORMATS }], imports: [NgxMomentDateModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatMomentModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [NgxMomentDateModule],\r\n                    providers: [{ provide: NGX_MAT_DATE_FORMATS, useValue: NGX_MAT_MOMENT_FORMATS }],\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-mat-moment-adapter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, NGX_MAT_MOMENT_FORMATS, NgxMatMomentAdapter, NgxMatMomentModule, NgxMomentDateModule };\n//# sourceMappingURL=angular-material-components-moment-adapter.mjs.map\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst moment = _rollupMoment__default || _rollupMoment;\n/** InjectionToken for moment date adapter to configure options. */\nconst MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken('MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\n    providedIn: 'root',\n    factory: MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\n    return {\n        useUtc: false,\n    };\n}\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n    const valuesArray = Array(length);\n    for (let i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n/** Adapts Moment.js Dates for use with Angular Material. */\nclass MomentDateAdapter extends DateAdapter {\n    constructor(dateLocale, _options) {\n        super();\n        this._options = _options;\n        this.setLocale(dateLocale || moment.locale());\n    }\n    setLocale(locale) {\n        super.setLocale(locale);\n        let momentLocaleData = moment.localeData(locale);\n        this._localeData = {\n            firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n            longMonths: momentLocaleData.months(),\n            shortMonths: momentLocaleData.monthsShort(),\n            dates: range(31, i => this.createDate(2017, 0, i + 1).format('D')),\n            longDaysOfWeek: momentLocaleData.weekdays(),\n            shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n            narrowDaysOfWeek: momentLocaleData.weekdaysMin(),\n        };\n    }\n    getYear(date) {\n        return this.clone(date).year();\n    }\n    getMonth(date) {\n        return this.clone(date).month();\n    }\n    getDate(date) {\n        return this.clone(date).date();\n    }\n    getDayOfWeek(date) {\n        return this.clone(date).day();\n    }\n    getMonthNames(style) {\n        // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n        return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n    }\n    getDateNames() {\n        return this._localeData.dates;\n    }\n    getDayOfWeekNames(style) {\n        if (style == 'long') {\n            return this._localeData.longDaysOfWeek;\n        }\n        if (style == 'short') {\n            return this._localeData.shortDaysOfWeek;\n        }\n        return this._localeData.narrowDaysOfWeek;\n    }\n    getYearName(date) {\n        return this.clone(date).format('YYYY');\n    }\n    getFirstDayOfWeek() {\n        return this._localeData.firstDayOfWeek;\n    }\n    getNumDaysInMonth(date) {\n        return this.clone(date).daysInMonth();\n    }\n    clone(date) {\n        return date.clone().locale(this.locale);\n    }\n    createDate(year, month, date) {\n        // Moment.js will create an invalid date if any of the components are out of bounds, but we\n        // explicitly check each case so we can throw more descriptive errors.\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (month < 0 || month > 11) {\n                throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n            }\n            if (date < 1) {\n                throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n            }\n        }\n        const result = this._createMoment({ year, month, date }).locale(this.locale);\n        // If the result isn't valid, the date must have been out of bounds for this month.\n        if (!result.isValid() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n        }\n        return result;\n    }\n    today() {\n        return this._createMoment().locale(this.locale);\n    }\n    parse(value, parseFormat) {\n        if (value && typeof value == 'string') {\n            return this._createMoment(value, parseFormat, this.locale);\n        }\n        return value ? this._createMoment(value).locale(this.locale) : null;\n    }\n    format(date, displayFormat) {\n        date = this.clone(date);\n        if (!this.isValid(date) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('MomentDateAdapter: Cannot format invalid date.');\n        }\n        return date.format(displayFormat);\n    }\n    addCalendarYears(date, years) {\n        return this.clone(date).add({ years });\n    }\n    addCalendarMonths(date, months) {\n        return this.clone(date).add({ months });\n    }\n    addCalendarDays(date, days) {\n        return this.clone(date).add({ days });\n    }\n    toIso8601(date) {\n        return this.clone(date).format();\n    }\n    /**\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n     * string into null. Returns an invalid date for all other values.\n     */\n    deserialize(value) {\n        let date;\n        if (value instanceof Date) {\n            date = this._createMoment(value).locale(this.locale);\n        }\n        else if (this.isDateInstance(value)) {\n            // Note: assumes that cloning also sets the correct locale.\n            return this.clone(value);\n        }\n        if (typeof value === 'string') {\n            if (!value) {\n                return null;\n            }\n            date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n        }\n        if (date && this.isValid(date)) {\n            return this._createMoment(date).locale(this.locale);\n        }\n        return super.deserialize(value);\n    }\n    isDateInstance(obj) {\n        return moment.isMoment(obj);\n    }\n    isValid(date) {\n        return this.clone(date).isValid();\n    }\n    invalid() {\n        return moment.invalid();\n    }\n    /** Creates a Moment instance while respecting the current UTC settings. */\n    _createMoment(date, format, locale) {\n        const { strict, useUtc } = this._options || {};\n        return useUtc ? moment.utc(date, format, locale, strict) : moment(date, format, locale, strict);\n    }\n}\nMomentDateAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MomentDateAdapter, deps: [{ token: MAT_DATE_LOCALE, optional: true }, { token: MAT_MOMENT_DATE_ADAPTER_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nMomentDateAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MomentDateAdapter });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MomentDateAdapter, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_DATE_LOCALE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_MOMENT_DATE_FORMATS = {\n    parse: {\n        dateInput: 'l',\n    },\n    display: {\n        dateInput: 'l',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n    },\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MomentDateModule {\n}\nMomentDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MomentDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMomentDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MomentDateModule });\nMomentDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MomentDateModule, providers: [\n        {\n            provide: DateAdapter,\n            useClass: MomentDateAdapter,\n            deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],\n        },\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MomentDateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        {\n                            provide: DateAdapter,\n                            useClass: MomentDateAdapter,\n                            deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],\n                        },\n                    ],\n                }]\n        }] });\nclass MatMomentDateModule {\n}\nMatMomentDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatMomentDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatMomentDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatMomentDateModule, imports: [MomentDateModule] });\nMatMomentDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatMomentDateModule, providers: [{ provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS }], imports: [MomentDateModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatMomentDateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MomentDateModule],\n                    providers: [{ provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS }],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, MAT_MOMENT_DATE_FORMATS, MatMomentDateModule, MomentDateAdapter, MomentDateModule };\n"],"x_google_ignoreList":[1,2]}
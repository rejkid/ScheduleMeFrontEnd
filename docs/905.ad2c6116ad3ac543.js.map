{"version":3,"file":"905.ad2c6116ad3ac543.js","mappings":"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","names":["MatProgressBarModule","ɵfac","t","ɵmod","i0","type","ɵinj","imports","MatCommonModule","CUSTOM_MOMENT_FORMATS","parse","dateInput","Constants","dateFormat","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","DOBModule","static","this","fesm2022_core","oAB","cJS","provide","DateAdapter","useClass","MomentDateAdapter","deps","MAT_DATE_LOCALE","MAT_DATE_FORMATS","useValue","CommonModule","FormsModule","ReactiveFormsModule","MaterialModule","MatSortModule","MatTableModule","MatPaginatorModule","MatButtonModule","MatDatepickerModule","MatNativeDateModule","MatInputModule","MatFormFieldModule","MatSelectModule","item_r6","FunctionComponent_form_0_div_2_div_7_div_7_Template","ctx_r5","submitted","form","controls","cleanerGroup","hasError","$event","_r10","ctx_r9","onDutyChanged","FunctionComponent_form_0_div_2_option_5_Template","FunctionComponent_form_0_div_2_div_6_Template","FunctionComponent_form_0_div_2_div_7_Template","ctx_r1","account","firstName","_c0","f","function","errors","functions","isCleaner","_r16","s_r12","$implicit","ctx_r14","deleteFunction","FunctionComponent_form_0_tbody_11_tr_1_td_5_Template","userFunction","group","ctx_r11","accountService","isAdmin","FunctionComponent_form_0_tbody_11_tr_1_Template","ctx_r2","userFunctions","FunctionComponent_form_0_div_2_Template","FunctionComponent_form_0_tbody_11_Template","_r18","ctx_r17","addFunction","ctx_r0","isLoggedAsAdmin","FunctionComponent","constructor","alertService","formBuilder","route","router","userFunctionIndexer","loading","isLoaded","ngOnInit","id","snapshot","params","getById","pipe","first","subscribe","next","getTasks","value","slice","console","log","Validators","required","functionValidator","groupValidator","bind","validator","get","setValue","length","parseInt","error","control","invalidFunction","invalidGroup","isValid","valid","currentValue","index","invalid","toString","push","addFunction4Account","name","deleteFunction4Account","success","keepAfterRouteChange","role","Role","Admin","undefined","CLEANER_STR","fun","find","event","target","i1","i2","i3","Xpm","selectors","decls","vars","consts","template","rf","ctx","FunctionComponent_form_0_Template","account_r4","isVerified","ListComponent_tr_44_div_14_Template","ListComponent_tr_44_div_15_Template","_r12","deleteAccount","ListComponent_tr_44_span_18_Template","ListComponent_tr_44_span_19_Template","title","lastName","email","dob","RoleAdminEnum","isDeleting","ListComponent","refreshList","getAll","accounts","sort","a","b","localeCompare","getAutoEmail","autoEmail","x","delete","filter","onDeleteAllUserAccounts","deleteAllUserAccounts","complete","onChangeHandler","tr","setAutoEmail","Boolean","checked","_r13","_r0","ListComponent_span_28_Template","ListComponent_tr_44_Template","ListComponent_tr_45_Template","account_r18","getGroup","account_r19","account_r20","account_r21","ctx_r10","account_r22","account_r24","_r27","ctx_r26","onDeleteSchedule","FunctionScheduleComponent_mat_cell_25_span_2_Template","_c1","restoredCtx","_r32","row_r28","i_r29","_r30","ctx_r31","onRowSelected","hovered","_c2","highlighted","COLUMNS_SCHEMA","key","label","FunctionScheduleComponent","accounts4DateAndFunction","_accounts4DateAndFunction","dateTimeFormat","accountsAvailable4Function","displayedColumns","map","col","columnsSchema","isAdding","accountsLoaded","dataSource","MatTableDataSource","currentSelectedAccount","lastSelectedAccount","titlePrefix","schedulesUpdatedEmitter","EventEmitter","selectedUser","setCurrentDate","dateTime","dateTimeStr","functionStr","loadAccounts4DateAndFunction","loadAccounts4Function","ngAfterViewInit","paginator","refreshAccounts","forEach","selectedAccount4Function","selected","emit","getGroupTasks","groupTasks","includes","userFunc","schedules","schedule","date","onChangeUser","array","split","item","onApplyFilter","input","filterValue","trim","toLowerCase","onAddSchedule","button","addSchedule","schedule2Add","accountId","newDate","deleting","userAvailability","scheduleGroup","newUserFunction","onDeleteSchedules","deleteSchedule","z","viewQuery","MatSort","FunctionScheduleComponent_option_8_Template","FunctionScheduleComponent_mat_header_cell_12_Template","FunctionScheduleComponent_mat_cell_13_Template","FunctionScheduleComponent_mat_header_cell_15_Template","FunctionScheduleComponent_mat_cell_16_Template","FunctionScheduleComponent_mat_header_cell_18_Template","FunctionScheduleComponent_mat_cell_19_Template","FunctionScheduleComponent_mat_header_cell_21_Template","FunctionScheduleComponent_mat_cell_22_Template","FunctionScheduleComponent_mat_header_cell_24_Template","FunctionScheduleComponent_mat_cell_25_Template","FunctionScheduleComponent_mat_header_row_26_Template","FunctionScheduleComponent_mat_row_27_Template","_r35","FunctionScheduleComponent_span_32_Template","_c3","_r11","onSchedulesUpdated","item_r8","ctx_r7","getDateTimeStr","GenerateSchedulesComponent","functions2SchedulesMap","Map","fComponents","functionsLoaded","enableCopyButton","enablePasteButton","dateTimeChangedEmitter","functionComponents","changes","comps","element","newMap","clear","entry","entries","set","scheduledDateTime","Date","information","setCopyPasteButtons","data","onChangeDateTime","moment","format","dateStr","toDate","onCopy","copyChildData","onPaste","onClear","childrenData","areChildrenEmpty","size","isFunc2SchedMapdEmpty","GenerateSchedulesComponent_div_0_Template","GenerateSchedulesComponent_mat_error_18_Template","_r4","GenerateSchedulesComponent_div_34_Template","_r2","row_r11","row_r12","day","row_r13","_r17","ctx_r16","MainSchedulerComponent_mat_cell_27_span_3_Template","row_r18","_r22","ctx_r21","MainSchedulerComponent","list","futureScheduleDateStrings","isUsersLoaded","scheduleDateTime","futureScheduleDates","getAllDates","dates","dateValidator","allDates","onCheckboxChange","scheduleDateTimes","assert","aDate","bDate","nowMs","now","scheduleServerDate","scheduleLocalDateStr","scheduleMs","getTime","getDayStrFromDate","futureScheduleDate","getDay","match","invalidDate","found","generateScheduleComponent","dateTimeChanged","MatPaginator","MainSchedulerComponent_mat_header_cell_20_Template","MainSchedulerComponent_mat_cell_21_Template","MainSchedulerComponent_mat_header_cell_23_Template","MainSchedulerComponent_mat_cell_24_Template","MainSchedulerComponent_mat_header_cell_26_Template","MainSchedulerComponent_mat_cell_27_Template","MainSchedulerComponent_mat_header_row_28_Template","MainSchedulerComponent_mat_row_29_Template","item_r21","ScheduleAllocatorComponent_form_0_div_31_mat_error_6_Template","ctx_r19","isReadOnly","enabled","_r26","ctx_r25","ScheduleAllocatorComponent_form_0_div_32_span_2_Template","ctx_r20","scheduledDate","ScheduleAllocatorComponent_form_0_mat_error_21_Template","_r28","ctx_r27","ScheduleAllocatorComponent_form_0_mat_option_29_Template","ScheduleAllocatorComponent_form_0_mat_error_30_Template","ScheduleAllocatorComponent_form_0_div_31_Template","ScheduleAllocatorComponent_form_0_div_32_Template","_r15","schedule_r29","_r31","ctx_r30","onDateChanged","schedule_r32","ctx_r34","onUserFunctionChanged","_r42","ctx_r41","onCleanerGroupPressed","_r45","ctx_r44","schedule_r37","ScheduleAllocatorComponent_mat_cell_20_span_1_Template","ScheduleAllocatorComponent_mat_cell_20_span_2_Template","_r51","rowIndex_r47","schedule_r48","ctx_r50","ScheduleAllocatorComponent_mat_cell_23_span_2_Template","_r56","row_r52","i_r53","_r54","ctx_r55","ScheduleAllocatorComponent","cdr","uppercasePipe","isUpdating","currentSelectedSchedule","lastSelectedSchedule","poolElements","color","groupTask","onScheduledAdded","connection","signalR","configureLogging","Information","withUrl","environment","baseUrl","build","start","then","catch","err","on","updateSchedulesFromServer","initSchedules","addValidators","minLength","disable","ngOnDestroy","stop","applyFilter","enable","markAsTouched","createSchedule","onInputFunc","transform","formDate","setSeconds","formTimeStr","formFunction","scheduleFunction","warn","scheduleGroupVal","rowIndex","schedule2Delete","updateSchedules","updateSchedule","i4","ScheduleAllocatorComponent_form_0_Template","_r59","_r1","ScheduleAllocatorComponent_mat_header_cell_13_Template","ScheduleAllocatorComponent_mat_cell_14_Template","ScheduleAllocatorComponent_mat_header_cell_16_Template","ScheduleAllocatorComponent_mat_cell_17_Template","ScheduleAllocatorComponent_mat_header_cell_19_Template","ScheduleAllocatorComponent_mat_cell_20_Template","ScheduleAllocatorComponent_mat_header_cell_22_Template","ScheduleAllocatorComponent_mat_cell_23_Template","ScheduleAllocatorComponent_mat_header_row_24_Template","ScheduleAllocatorComponent_mat_row_25_Template","_c4","uploadProgress","routes","path","component","loadChildren","__webpack_require__","e","AddEditModule","UploadAccountsComponent","renderer","fileName","fileHasBeenSelected","progressChildren","nativeElement","removeAttribute","onFileSelected","file","files","onSubmit","fileUpload","formData","FormData","append","upload$","uploadAccountsFile","finalize","reset","uploadSub","info","navigate","relativeTo","cancelUpload","unsubscribe","_r3","click","UploadAccountsComponent_div_22_Template","AutoGeneratorModule","AccountsRoutingModule","RouterModule","forChild","AppDateAdapter","NativeDateAdapter","displayFormat","dayStr","getDate","padStart","monthStr","getMonth","getFullYear","toDateString","AccountsModule","UpperCasePipe","NgxMatDateAdapter","NgxMatMomentAdapter","NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS","NGX_MAT_DATE_FORMATS","ScheduleModule","NgxMatDatetimePickerModule","NgxMatMomentModule","ApplicationPipesModuleModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2020/progress-bar.mjs","./src/app/dob/dob.module.ts","./src/app/admin/accounts/function.component.html","./src/app/admin/accounts/function.component.ts","./src/app/admin/accounts/list.component.html","./src/app/admin/accounts/list.component.ts","./src/app/admin/accounts/function-schedule/function-schedule.component.html","./src/app/admin/accounts/function-schedule/function-schedule.component.ts","./src/app/admin/accounts/generate-schedules/generate-schedules.component.html","./src/app/admin/accounts/generate-schedules/generate-schedules.component.ts","./src/app/admin/accounts/main-scheduler/main-scheduler.component.html","./src/app/admin/accounts/main-scheduler/main-scheduler.component.ts","./src/app/admin/accounts/schedule.allocator.component.html","./src/app/admin/accounts/schedule.allocator.component.ts","./src/app/admin/accounts/upload-accounts/upload-accounts.component.html","./src/app/admin/accounts/accounts-routing.module.ts","./src/app/admin/accounts/upload-accounts/upload-accounts.component.ts","./src/app/admin/accounts/accounts.module.ts"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, Input, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-progress-bar`. */\nconst MAT_PROGRESS_BAR_DEFAULT_OPTIONS = new InjectionToken('MAT_PROGRESS_BAR_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_PROGRESS_BAR_LOCATION = new InjectionToken('mat-progress-bar-location', { providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY });\n/** @docs-private */\nfunction MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nconst _MatProgressBarBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}, 'primary');\nclass MatProgressBar extends _MatProgressBarBase {\n    constructor(elementRef, _ngZone, _changeDetectorRef, _animationMode, defaults) {\n        super(elementRef);\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /** Flag that indicates whether NoopAnimations mode is set to true. */\n        this._isNoopAnimation = false;\n        this._value = 0;\n        this._bufferValue = 0;\n        /**\n         * Event emitted when animation of the primary progress bar completes. This event will not\n         * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n         * animations (indeterminate and query).\n         */\n        this.animationEnd = new EventEmitter();\n        this._mode = 'determinate';\n        /** Event handler for `transitionend` events. */\n        this._transitionendHandler = (event) => {\n            if (this.animationEnd.observers.length === 0 ||\n                !event.target ||\n                !event.target.classList.contains('mdc-linear-progress__primary-bar')) {\n                return;\n            }\n            if (this.mode === 'determinate' || this.mode === 'buffer') {\n                this._ngZone.run(() => this.animationEnd.next({ value: this.value }));\n            }\n        };\n        this._isNoopAnimation = _animationMode === 'NoopAnimations';\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this.defaultColor = defaults.color;\n            }\n            this.mode = defaults.mode || this.mode;\n        }\n    }\n    /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n    get value() {\n        return this._value;\n    }\n    set value(v) {\n        this._value = clamp(coerceNumberProperty(v));\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Buffer value of the progress bar. Defaults to zero. */\n    get bufferValue() {\n        return this._bufferValue || 0;\n    }\n    set bufferValue(v) {\n        this._bufferValue = clamp(coerceNumberProperty(v));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Mode of the progress bar.\n     *\n     * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n     * 'determinate'.\n     * Mirrored to mode attribute.\n     */\n    get mode() {\n        return this._mode;\n    }\n    set mode(value) {\n        // Note that we don't technically need a getter and a setter here,\n        // but we use it to match the behavior of the existing mat-progress-bar.\n        this._mode = value;\n        this._changeDetectorRef.markForCheck();\n    }\n    ngAfterViewInit() {\n        // Run outside angular so change detection didn't get triggered on every transition end\n        // instead only on the animation that we care about (primary value bar's transitionend)\n        this._ngZone.runOutsideAngular(() => {\n            this._elementRef.nativeElement.addEventListener('transitionend', this._transitionendHandler);\n        });\n    }\n    ngOnDestroy() {\n        this._elementRef.nativeElement.removeEventListener('transitionend', this._transitionendHandler);\n    }\n    /** Gets the transform style that should be applied to the primary bar. */\n    _getPrimaryBarTransform() {\n        return `scaleX(${this._isIndeterminate() ? 1 : this.value / 100})`;\n    }\n    /** Gets the `flex-basis` value that should be applied to the buffer bar. */\n    _getBufferBarFlexBasis() {\n        return `${this.mode === 'buffer' ? this.bufferValue : 100}%`;\n    }\n    /** Returns whether the progress bar is indeterminate. */\n    _isIndeterminate() {\n        return this.mode === 'indeterminate' || this.mode === 'query';\n    }\n}\nMatProgressBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatProgressBar, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_PROGRESS_BAR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatProgressBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: MatProgressBar, selector: \"mat-progress-bar\", inputs: { color: \"color\", value: \"value\", bufferValue: \"bufferValue\", mode: \"mode\" }, outputs: { animationEnd: \"animationEnd\" }, host: { attributes: { \"role\": \"progressbar\", \"aria-valuemin\": \"0\", \"aria-valuemax\": \"100\", \"tabindex\": \"-1\" }, properties: { \"attr.aria-valuenow\": \"_isIndeterminate() ? null : value\", \"attr.mode\": \"mode\", \"class._mat-animation-noopable\": \"_isNoopAnimation\", \"class.mdc-linear-progress--animation-ready\": \"!_isNoopAnimation\", \"class.mdc-linear-progress--indeterminate\": \"_isIndeterminate()\" }, classAttribute: \"mat-mdc-progress-bar mdc-linear-progress\" }, exportAs: [\"matProgressBar\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<div class=\\\"mdc-linear-progress__buffer\\\" aria-hidden=\\\"true\\\">\\n  <div\\n    class=\\\"mdc-linear-progress__buffer-bar\\\"\\n    [style.flex-basis]=\\\"_getBufferBarFlexBasis()\\\"></div>\\n  <div class=\\\"mdc-linear-progress__buffer-dots\\\"></div>\\n</div>\\n<div\\n  class=\\\"mdc-linear-progress__bar mdc-linear-progress__primary-bar\\\"\\n  aria-hidden=\\\"true\\\"\\n  [style.transform]=\\\"_getPrimaryBarTransform()\\\">\\n  <span class=\\\"mdc-linear-progress__bar-inner\\\"></span>\\n</div>\\n<div class=\\\"mdc-linear-progress__bar mdc-linear-progress__secondary-bar\\\" aria-hidden=\\\"true\\\">\\n  <span class=\\\"mdc-linear-progress__bar-inner\\\"></span>\\n</div>\\n\", styles: [\"@keyframes mdc-linear-progress-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(var(--mdc-linear-progress-primary-half, 83.67142%))}100%{transform:translateX(var(--mdc-linear-progress-primary-full, 200.611057%))}}@keyframes mdc-linear-progress-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mdc-linear-progress-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(var(--mdc-linear-progress-secondary-quarter, 37.651913%))}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(var(--mdc-linear-progress-secondary-half, 84.386165%))}100%{transform:translateX(var(--mdc-linear-progress-secondary-full, 160.277782%))}}@keyframes mdc-linear-progress-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.205028, 0.057051, 0.57661, 0.453971);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.152313, 0.196432, 0.648374, 1.004315);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.257759, -0.003163, 0.211762, 1.38179);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mdc-linear-progress-buffering{from{transform:rotate(180deg) translateX(-10px)}}@keyframes mdc-linear-progress-primary-indeterminate-translate-reverse{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(var(--mdc-linear-progress-primary-half-neg, -83.67142%))}100%{transform:translateX(var(--mdc-linear-progress-primary-full-neg, -200.611057%))}}@keyframes mdc-linear-progress-secondary-indeterminate-translate-reverse{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(var(--mdc-linear-progress-secondary-quarter-neg, -37.651913%))}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(var(--mdc-linear-progress-secondary-half-neg, -84.386165%))}100%{transform:translateX(var(--mdc-linear-progress-secondary-full-neg, -160.277782%))}}@keyframes mdc-linear-progress-buffering-reverse{from{transform:translateX(-10px)}}.mdc-linear-progress{position:relative;width:100%;transform:translateZ(0);outline:1px solid rgba(0,0,0,0);overflow:hidden;transition:opacity 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}@media screen and (forced-colors: active){.mdc-linear-progress{outline-color:CanvasText}}.mdc-linear-progress__bar{position:absolute;width:100%;height:100%;animation:none;transform-origin:top left;transition:transform 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-linear-progress__bar-inner{display:inline-block;position:absolute;width:100%;animation:none;border-top-style:solid}.mdc-linear-progress__buffer{display:flex;position:absolute;width:100%;height:100%}.mdc-linear-progress__buffer-dots{background-repeat:repeat-x;flex:auto;transform:rotate(180deg);animation:mdc-linear-progress-buffering 250ms infinite linear}.mdc-linear-progress__buffer-bar{flex:0 1 100%;transition:flex-basis 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-linear-progress__primary-bar{transform:scaleX(0)}.mdc-linear-progress__secondary-bar{display:none}.mdc-linear-progress--indeterminate .mdc-linear-progress__bar{transition:none}.mdc-linear-progress--indeterminate .mdc-linear-progress__primary-bar{left:-145.166611%}.mdc-linear-progress--indeterminate .mdc-linear-progress__secondary-bar{left:-54.888891%;display:block}.mdc-linear-progress--indeterminate.mdc-linear-progress--animation-ready .mdc-linear-progress__primary-bar{animation:mdc-linear-progress-primary-indeterminate-translate 2s infinite linear}.mdc-linear-progress--indeterminate.mdc-linear-progress--animation-ready .mdc-linear-progress__primary-bar>.mdc-linear-progress__bar-inner{animation:mdc-linear-progress-primary-indeterminate-scale 2s infinite linear}.mdc-linear-progress--indeterminate.mdc-linear-progress--animation-ready .mdc-linear-progress__secondary-bar{animation:mdc-linear-progress-secondary-indeterminate-translate 2s infinite linear}.mdc-linear-progress--indeterminate.mdc-linear-progress--animation-ready .mdc-linear-progress__secondary-bar>.mdc-linear-progress__bar-inner{animation:mdc-linear-progress-secondary-indeterminate-scale 2s infinite linear}[dir=rtl] .mdc-linear-progress:not([dir=ltr]) .mdc-linear-progress__bar,.mdc-linear-progress[dir=rtl]:not([dir=ltr]) .mdc-linear-progress__bar{right:0;-webkit-transform-origin:center right;transform-origin:center right}[dir=rtl] .mdc-linear-progress:not([dir=ltr]).mdc-linear-progress--animation-ready .mdc-linear-progress__primary-bar,.mdc-linear-progress[dir=rtl]:not([dir=ltr]).mdc-linear-progress--animation-ready .mdc-linear-progress__primary-bar{animation-name:mdc-linear-progress-primary-indeterminate-translate-reverse}[dir=rtl] .mdc-linear-progress:not([dir=ltr]).mdc-linear-progress--animation-ready .mdc-linear-progress__secondary-bar,.mdc-linear-progress[dir=rtl]:not([dir=ltr]).mdc-linear-progress--animation-ready .mdc-linear-progress__secondary-bar{animation-name:mdc-linear-progress-secondary-indeterminate-translate-reverse}[dir=rtl] .mdc-linear-progress:not([dir=ltr]) .mdc-linear-progress__buffer-dots,.mdc-linear-progress[dir=rtl]:not([dir=ltr]) .mdc-linear-progress__buffer-dots{animation:mdc-linear-progress-buffering-reverse 250ms infinite linear;transform:rotate(0)}[dir=rtl] .mdc-linear-progress:not([dir=ltr]).mdc-linear-progress--indeterminate .mdc-linear-progress__primary-bar,.mdc-linear-progress[dir=rtl]:not([dir=ltr]).mdc-linear-progress--indeterminate .mdc-linear-progress__primary-bar{right:-145.166611%;left:auto}[dir=rtl] .mdc-linear-progress:not([dir=ltr]).mdc-linear-progress--indeterminate .mdc-linear-progress__secondary-bar,.mdc-linear-progress[dir=rtl]:not([dir=ltr]).mdc-linear-progress--indeterminate .mdc-linear-progress__secondary-bar{right:-54.888891%;left:auto}.mdc-linear-progress--closed{opacity:0}.mdc-linear-progress--closed-animation-off .mdc-linear-progress__buffer-dots{animation:none}.mdc-linear-progress--closed-animation-off.mdc-linear-progress--indeterminate .mdc-linear-progress__bar,.mdc-linear-progress--closed-animation-off.mdc-linear-progress--indeterminate .mdc-linear-progress__bar .mdc-linear-progress__bar-inner{animation:none}.mdc-linear-progress__bar-inner{border-color:var(--mdc-linear-progress-active-indicator-color, #6200ee)}.mdc-linear-progress__buffer-dots{background-image:url(\\\"data:image/svg+xml,%3Csvg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' enable-background='new 0 0 5 2' xml:space='preserve' viewBox='0 0 5 2' preserveAspectRatio='none slice'%3E%3Ccircle cx='1' cy='1' r='1' fill='%23e6e6e6'/%3E%3C/svg%3E\\\")}.mdc-linear-progress__buffer-bar{background-color:#e6e6e6}.mdc-linear-progress{height:var(--mdc-linear-progress-track-height, 4px)}.mdc-linear-progress__bar-inner{border-top-width:var(--mdc-linear-progress-track-height, 4px)}.mdc-linear-progress__buffer-dots{background-size:10px var(--mdc-linear-progress-track-height, 4px)}.mat-mdc-progress-bar{display:block}.mat-mdc-progress-bar[mode=query]{transform:scaleX(-1)}.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__buffer-dots,.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__primary-bar,.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__secondary-bar,.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__bar-inner.mdc-linear-progress__bar-inner{animation:none}.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__primary-bar,.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__buffer-bar{transition:transform 1ms}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatProgressBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-progress-bar', exportAs: 'matProgressBar', host: {\n                        'role': 'progressbar',\n                        'aria-valuemin': '0',\n                        'aria-valuemax': '100',\n                        // set tab index to -1 so screen readers will read the aria-label\n                        // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n                        'tabindex': '-1',\n                        '[attr.aria-valuenow]': '_isIndeterminate() ? null : value',\n                        '[attr.mode]': 'mode',\n                        'class': 'mat-mdc-progress-bar mdc-linear-progress',\n                        '[class._mat-animation-noopable]': '_isNoopAnimation',\n                        '[class.mdc-linear-progress--animation-ready]': '!_isNoopAnimation',\n                        '[class.mdc-linear-progress--indeterminate]': '_isIndeterminate()',\n                    }, inputs: ['color'], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<div class=\\\"mdc-linear-progress__buffer\\\" aria-hidden=\\\"true\\\">\\n  <div\\n    class=\\\"mdc-linear-progress__buffer-bar\\\"\\n    [style.flex-basis]=\\\"_getBufferBarFlexBasis()\\\"></div>\\n  <div class=\\\"mdc-linear-progress__buffer-dots\\\"></div>\\n</div>\\n<div\\n  class=\\\"mdc-linear-progress__bar mdc-linear-progress__primary-bar\\\"\\n  aria-hidden=\\\"true\\\"\\n  [style.transform]=\\\"_getPrimaryBarTransform()\\\">\\n  <span class=\\\"mdc-linear-progress__bar-inner\\\"></span>\\n</div>\\n<div class=\\\"mdc-linear-progress__bar mdc-linear-progress__secondary-bar\\\" aria-hidden=\\\"true\\\">\\n  <span class=\\\"mdc-linear-progress__bar-inner\\\"></span>\\n</div>\\n\", styles: [\"@keyframes mdc-linear-progress-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(var(--mdc-linear-progress-primary-half, 83.67142%))}100%{transform:translateX(var(--mdc-linear-progress-primary-full, 200.611057%))}}@keyframes mdc-linear-progress-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mdc-linear-progress-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(var(--mdc-linear-progress-secondary-quarter, 37.651913%))}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(var(--mdc-linear-progress-secondary-half, 84.386165%))}100%{transform:translateX(var(--mdc-linear-progress-secondary-full, 160.277782%))}}@keyframes mdc-linear-progress-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.205028, 0.057051, 0.57661, 0.453971);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.152313, 0.196432, 0.648374, 1.004315);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.257759, -0.003163, 0.211762, 1.38179);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mdc-linear-progress-buffering{from{transform:rotate(180deg) translateX(-10px)}}@keyframes mdc-linear-progress-primary-indeterminate-translate-reverse{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(var(--mdc-linear-progress-primary-half-neg, -83.67142%))}100%{transform:translateX(var(--mdc-linear-progress-primary-full-neg, -200.611057%))}}@keyframes mdc-linear-progress-secondary-indeterminate-translate-reverse{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(var(--mdc-linear-progress-secondary-quarter-neg, -37.651913%))}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(var(--mdc-linear-progress-secondary-half-neg, -84.386165%))}100%{transform:translateX(var(--mdc-linear-progress-secondary-full-neg, -160.277782%))}}@keyframes mdc-linear-progress-buffering-reverse{from{transform:translateX(-10px)}}.mdc-linear-progress{position:relative;width:100%;transform:translateZ(0);outline:1px solid rgba(0,0,0,0);overflow:hidden;transition:opacity 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}@media screen and (forced-colors: active){.mdc-linear-progress{outline-color:CanvasText}}.mdc-linear-progress__bar{position:absolute;width:100%;height:100%;animation:none;transform-origin:top left;transition:transform 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-linear-progress__bar-inner{display:inline-block;position:absolute;width:100%;animation:none;border-top-style:solid}.mdc-linear-progress__buffer{display:flex;position:absolute;width:100%;height:100%}.mdc-linear-progress__buffer-dots{background-repeat:repeat-x;flex:auto;transform:rotate(180deg);animation:mdc-linear-progress-buffering 250ms infinite linear}.mdc-linear-progress__buffer-bar{flex:0 1 100%;transition:flex-basis 250ms 0ms cubic-bezier(0.4, 0, 0.6, 1)}.mdc-linear-progress__primary-bar{transform:scaleX(0)}.mdc-linear-progress__secondary-bar{display:none}.mdc-linear-progress--indeterminate .mdc-linear-progress__bar{transition:none}.mdc-linear-progress--indeterminate .mdc-linear-progress__primary-bar{left:-145.166611%}.mdc-linear-progress--indeterminate .mdc-linear-progress__secondary-bar{left:-54.888891%;display:block}.mdc-linear-progress--indeterminate.mdc-linear-progress--animation-ready .mdc-linear-progress__primary-bar{animation:mdc-linear-progress-primary-indeterminate-translate 2s infinite linear}.mdc-linear-progress--indeterminate.mdc-linear-progress--animation-ready .mdc-linear-progress__primary-bar>.mdc-linear-progress__bar-inner{animation:mdc-linear-progress-primary-indeterminate-scale 2s infinite linear}.mdc-linear-progress--indeterminate.mdc-linear-progress--animation-ready .mdc-linear-progress__secondary-bar{animation:mdc-linear-progress-secondary-indeterminate-translate 2s infinite linear}.mdc-linear-progress--indeterminate.mdc-linear-progress--animation-ready .mdc-linear-progress__secondary-bar>.mdc-linear-progress__bar-inner{animation:mdc-linear-progress-secondary-indeterminate-scale 2s infinite linear}[dir=rtl] .mdc-linear-progress:not([dir=ltr]) .mdc-linear-progress__bar,.mdc-linear-progress[dir=rtl]:not([dir=ltr]) .mdc-linear-progress__bar{right:0;-webkit-transform-origin:center right;transform-origin:center right}[dir=rtl] .mdc-linear-progress:not([dir=ltr]).mdc-linear-progress--animation-ready .mdc-linear-progress__primary-bar,.mdc-linear-progress[dir=rtl]:not([dir=ltr]).mdc-linear-progress--animation-ready .mdc-linear-progress__primary-bar{animation-name:mdc-linear-progress-primary-indeterminate-translate-reverse}[dir=rtl] .mdc-linear-progress:not([dir=ltr]).mdc-linear-progress--animation-ready .mdc-linear-progress__secondary-bar,.mdc-linear-progress[dir=rtl]:not([dir=ltr]).mdc-linear-progress--animation-ready .mdc-linear-progress__secondary-bar{animation-name:mdc-linear-progress-secondary-indeterminate-translate-reverse}[dir=rtl] .mdc-linear-progress:not([dir=ltr]) .mdc-linear-progress__buffer-dots,.mdc-linear-progress[dir=rtl]:not([dir=ltr]) .mdc-linear-progress__buffer-dots{animation:mdc-linear-progress-buffering-reverse 250ms infinite linear;transform:rotate(0)}[dir=rtl] .mdc-linear-progress:not([dir=ltr]).mdc-linear-progress--indeterminate .mdc-linear-progress__primary-bar,.mdc-linear-progress[dir=rtl]:not([dir=ltr]).mdc-linear-progress--indeterminate .mdc-linear-progress__primary-bar{right:-145.166611%;left:auto}[dir=rtl] .mdc-linear-progress:not([dir=ltr]).mdc-linear-progress--indeterminate .mdc-linear-progress__secondary-bar,.mdc-linear-progress[dir=rtl]:not([dir=ltr]).mdc-linear-progress--indeterminate .mdc-linear-progress__secondary-bar{right:-54.888891%;left:auto}.mdc-linear-progress--closed{opacity:0}.mdc-linear-progress--closed-animation-off .mdc-linear-progress__buffer-dots{animation:none}.mdc-linear-progress--closed-animation-off.mdc-linear-progress--indeterminate .mdc-linear-progress__bar,.mdc-linear-progress--closed-animation-off.mdc-linear-progress--indeterminate .mdc-linear-progress__bar .mdc-linear-progress__bar-inner{animation:none}.mdc-linear-progress__bar-inner{border-color:var(--mdc-linear-progress-active-indicator-color, #6200ee)}.mdc-linear-progress__buffer-dots{background-image:url(\\\"data:image/svg+xml,%3Csvg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' enable-background='new 0 0 5 2' xml:space='preserve' viewBox='0 0 5 2' preserveAspectRatio='none slice'%3E%3Ccircle cx='1' cy='1' r='1' fill='%23e6e6e6'/%3E%3C/svg%3E\\\")}.mdc-linear-progress__buffer-bar{background-color:#e6e6e6}.mdc-linear-progress{height:var(--mdc-linear-progress-track-height, 4px)}.mdc-linear-progress__bar-inner{border-top-width:var(--mdc-linear-progress-track-height, 4px)}.mdc-linear-progress__buffer-dots{background-size:10px var(--mdc-linear-progress-track-height, 4px)}.mat-mdc-progress-bar{display:block}.mat-mdc-progress-bar[mode=query]{transform:scaleX(-1)}.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__buffer-dots,.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__primary-bar,.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__secondary-bar,.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__bar-inner.mdc-linear-progress__bar-inner{animation:none}.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__primary-bar,.mat-mdc-progress-bar._mat-animation-noopable .mdc-linear-progress__buffer-bar{transition:transform 1ms}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_PROGRESS_BAR_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { value: [{\n                type: Input\n            }], bufferValue: [{\n                type: Input\n            }], animationEnd: [{\n                type: Output\n            }], mode: [{\n                type: Input\n            }] } });\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v, min = 0, max = 100) {\n    return Math.max(min, Math.min(max, v));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatProgressBarModule {\n}\nMatProgressBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatProgressBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatProgressBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatProgressBarModule, declarations: [MatProgressBar], exports: [MatProgressBar, MatCommonModule] });\nMatProgressBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatProgressBarModule, imports: [MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatProgressBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [MatProgressBar, MatCommonModule],\n                    declarations: [MatProgressBar],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_BAR_DEFAULT_OPTIONS, MAT_PROGRESS_BAR_LOCATION, MAT_PROGRESS_BAR_LOCATION_FACTORY, MatProgressBar, MatProgressBarModule };\n","import { Inject, Injectable, LOCALE_ID, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { environment } from 'src/environments/environment';\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MatNativeDateModule, NativeDateAdapter } from '@angular/material/core';\nimport { DOBComponent } from '../dob/dob.component';\nimport { MatTableModule } from '@angular/material/table';\nimport { MaterialModule } from 'src/app/material/material.module';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Constants } from '../constants';\n\nexport const CUSTOM_MOMENT_FORMATS = {\n  parse: {\n    dateInput: Constants.dateFormat,\n  },\n  display: {\n    dateInput: Constants.dateFormat,\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n};\n/* This is an alternative way of displaying Date in the format `${environment.dateFormat}` */\n// @Injectable()\n// export class AppDateAdapter extends NativeDateAdapter {\n\n//   constructor(@Inject(LOCALE_ID) public override locale: string, platform: Platform) {\n//     super(locale, platform)\n//   }\n//   override format(date: Date, displayFormat: Object): string {\n\n//     if (displayFormat === `${environment.dateFormat}`) {\n\n//       const day = date.getDate();\n//       var dayStr = day.toString().padStart(2, '0')\n//       var month = date.getMonth() + 1;\n//       var monthStr = month.toString().padStart(2, '0')\n//       const year = date.getFullYear();\n//       var yearStr = year.toString().padStart(4, '0')\n\n//       return `${dayStr}-${monthStr}-${yearStr}`;\n//     }\n\n//     return date.toDateString();\n//   }\n\n// }\n\n@NgModule({\n  declarations: [\n    DOBComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n    MaterialModule,\n    MatSortModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatButtonModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatSelectModule,\n  ],\n  exports: [\n    DOBComponent,\n  ],\n  providers: [\n    {provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\n    {provide: MAT_DATE_FORMATS, useValue: CUSTOM_MOMENT_FORMATS},\n\n    // {\n    //   provide: MAT_DATE_FORMATS, useValue: CUSTOM_MOMENT_FORMATS\n    // },\n    // {\n    //   provide: DateAdapter, useClass: AppDateAdapter\n    // },\n  ],\n})\nexport class DOBModule { }\n","<form [formGroup]=\"form\" *ngIf=\"isLoaded && !isAdmin\">\r\n    <div class=\"border-primary\">\r\n        <div class=\"row\" *ngIf=\"isLoggedAsAdmin\">\r\n            <div class=\"mb-3 col-5\">\r\n                <label>Choose Duties for {{account.firstName}}</label>\r\n                <select formControlName=\"function\" class=\"form-select\"\r\n                    [ngClass]=\"{ 'is-invalid': submitted && f['function'].errors }\" (change)=\"onDutyChanged($event)\" >\r\n                    <option *ngFor=\"let item of functions\" [value]='item'>\r\n                        {{ item }}\r\n                    </option>\r\n                </select>\r\n                <div *ngIf=\"submitted && form.controls['function'].hasError('invalidFunction')\" class=\"alert alert-danger\">Duty\r\n                    can't be empty</div>\r\n            </div>\r\n        \r\n            <div class=\"col-3\" *ngIf=isCleaner>\r\n                <div class=\"row\">\r\n                    <div class=\"col-1 pb-3\">\r\n                        <label for=\"group\">Team</label>\r\n                        <input type=\"text\" #data formControlName=\"cleanerGroup\" name=\"group\" placeholder=\"Specify a group\"/>\r\n                    </div>\r\n                </div>\r\n                <div *ngIf=\"submitted && form.controls['cleanerGroup'].hasError('invalidGroup')\" class=\"alert alert-danger\">Group\r\n                    can't be empty</div>\r\n                </div>\r\n\r\n        </div>\r\n        <div class=\"border border-primary\">\r\n            <table class=\"table table-striped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th style=\"width:20%\">Duty</th>\r\n                        <th style=\"width:20%\">Group</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody *ngIf=\"functions\">\r\n                    <tr *ngFor=\"let s of userFunctions\">\r\n                        <td>{{s.userFunction}} </td>\r\n                        <td>{{s.group}} </td>\r\n                        <td style=\"white-space: nowrap\" *ngIf=\"accountService.isAdmin()\">\r\n\r\n                            <button type=\"button\" (click)=\"deleteFunction(s)\"\r\n                                class=\"btn btn-sm btn-danger btn-delete-account\"> Delete\r\n                            </button>\r\n                        </td>\r\n                        </tr>\r\n                    </tbody>\r\n                <div class=\"mb-3\">\r\n                    <button type=\"button\" (click)=\"addFunction()\" class=\"btn btn-primary\" >\r\n                        Add Duty\r\n                    </button>\r\n                </div>\r\n            </table>\r\n        </div>\r\n    </div>\r\n    <div class=\"mb-3\">\r\n        <a routerLink=\"/admin/accounts\" class=\"btn btn-link\">Back</a>\r\n    </div>\r\n\r\n</form>","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Form, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { first } from 'rxjs/operators';\r\nimport { Account, Role } from 'src/app/_models';\r\nimport { UserFunction } from 'src/app/_models/userfunction';\r\nimport { AccountService, AlertService } from 'src/app/_services';\r\nimport { Constants } from 'src/app/constants';\r\n\r\n@Component({ templateUrl: 'function.component.html', styleUrls: ['./function.component.less'] })\r\nexport class FunctionComponent implements OnInit {\r\n  id: string;\r\n  account: Account;\r\n  form: FormGroup;\r\n  userFunctionIndexer: number = 0;\r\n\r\n  userFunctions: UserFunction[] = [];\r\n  functions: string[] = [];\r\n  submitted = false;\r\n  isLoggedAsAdmin: boolean = false;\r\n  loading = false;\r\n  accountService : AccountService; \r\n\r\n  isLoaded: boolean = false;\r\n  constructor( accountService: AccountService,\r\n    private alertService: AlertService,\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router) {\r\n    this.accountService = accountService;\r\n    this.isLoggedAsAdmin = this.accountService.isAdmin();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.id = this.route.snapshot.params['id'];\r\n    this.accountService.getById(this.id)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (account) => {\r\n          this.accountService.getTasks()\r\n            .pipe(first())\r\n            .subscribe({\r\n              next: (value) => {\r\n                this.functions = value;\r\n\r\n                this.account = account;\r\n                this.userFunctions = account.userFunctions.slice();\r\n\r\n                console.log(this.account + this.id);\r\n                this.form = this.formBuilder.group({\r\n\r\n                  function: ['', [Validators.required, this.functionValidator]],\r\n                  cleanerGroup: ['', [this.groupValidator.bind(this)]] ,\r\n\r\n                }, { validator: (group : FormGroup) => {\r\n                  if (group.controls['function'].value == 'Cleaner') {\r\n                    return Validators.required(group.controls['cleanerGroup']);\r\n                  }\r\n                  return null;\r\n                }});\r\n                this.form.get('function').setValue(this.functions[0]);\r\n\r\n                this.userFunctionIndexer = account.userFunctions.length > 0 ? parseInt(account.userFunctions[account.userFunctions.length - 1].id) : 0;\r\n\r\n                this.isLoaded = true;\r\n\r\n              },\r\n              error: error => {\r\n                this.alertService.error(error);\r\n              }\r\n            });\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n        }\r\n      });\r\n  }\r\n  // convenience getter for easy access to form fields\r\n  get f() { return this.form.controls; }\r\n\r\n  functionValidator(control: FormControl): { [s: string]: boolean } {\r\n    if (control.value === '') {\r\n      return { invalidFunction: true };\r\n    }\r\n    return null;\r\n  }\r\n  groupValidator(control: FormControl): { [s: string]: boolean } {\r\n    if (this.isCleaner && control.value === '') {\r\n      return { invalidGroup: true };\r\n    }\r\n    return null;\r\n  }\r\n  get isValid() {\r\n    var funcValid = this.f['function'].valid; \r\n    var groupValid = this.f['cleanerGroup'].valid;\r\n    var formValid = this.form.valid;\r\n    return this.form.valid;\r\n\r\n  }\r\n  addFunction() {\r\n    this.submitted = true;\r\n\r\n    var currentValue = this.form.controls['function'].value;\r\n\r\n    for (let index = 0; index < this.userFunctions.length; index++) {\r\n      if (this.userFunctions[index].userFunction === currentValue) {\r\n        this.alertService.error(currentValue + \" already exists\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    // stop here if form is invalid\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n\r\n    var userFunction: UserFunction = {\r\n      id: (++this.userFunctionIndexer).toString(),\r\n      userFunction: this.form.controls['function'].value,\r\n      group: this.f['cleanerGroup'].value\r\n    }\r\n    this.userFunctions.push(userFunction);\r\n    this.addFunction4Account(userFunction);\r\n  }\r\n  deleteFunction(name: UserFunction) { \r\n    this.deleteFunction4Account(name);\r\n  }\r\n  private addFunction4Account(userFunction: UserFunction) {\r\n\r\n    this.accountService.addFunction(this.id, userFunction)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (account) => {\r\n          this.userFunctions = account.userFunctions.slice();\r\n          //this.alertService.success('Update successful', { keepAfterRouteChange: true });\r\n          //this.router.navigate(['../../'], { relativeTo: this.route });\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n   \r\n  private deleteFunction4Account(userFunctions: UserFunction) {\r\n    this.accountService.deleteFunction(this.id, userFunctions)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (account) => {\r\n          this.userFunctions = account.userFunctions.slice();\r\n\r\n          this.alertService.success('Update successful', { keepAfterRouteChange: true });\r\n          //this.router.navigate(['../../'], { relativeTo: this.route });\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n   \r\n  get isAdmin() {\r\n    return this.account.role == Role.Admin;\r\n  }\r\n  get isCleaner() {\r\n    if(this.form == undefined)\r\n     return false;\r\n    return this.form.get('function').value === Constants.CLEANER_STR;\r\n  }\r\n  get group() : string {\r\n    var fun = this.account.userFunctions.find(f => {\r\n      console.log(f);\r\n      return f.group.length > 0\r\n    });\r\n    if (fun != null)\r\n      return fun.group\r\n    else\r\n      return \"\";\r\n  }\r\n  onDutyChanged(event: Event) {\r\n    var valueSelected = (event.target as HTMLInputElement).value;\r\n    if(valueSelected == Constants.CLEANER_STR) {\r\n      this.f[\"cleanerGroup\"].setValue(this.group);\r\n    } else {\r\n    }\r\n  }\r\n}\r\n","<h1>Accounts Auto Email</h1>\r\n<div class=\"container\">\r\n    <div class=\"row equal\">\r\n        <div class=\"mb-3 col-2 gx-0\">\r\n            <input type=\"checkbox\" #tr (click)=\"onChangeHandler($event, tr)\" [checked]=\"autoEmail\"\r\n                [disabled]=\"false\" />&nbsp;Send e-mails:\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<h1>Accounts</h1>\r\n<p>All accounts from secure (admin only) api end point:</p>\r\n<div class=\"container\">\r\n    <div class=\"row equal\">\r\n        <div class=\"col-2\">\r\n            <a routerLink=\"add-edit/add\" class=\"btn btn-sm btn-success mb-2\">Create Account</a>\r\n        </div>\r\n        <div class=\"col-2\">\r\n            <a routerLink=\"upload\" class=\"btn btn-sm btn-success mb-2\">Upload Accounts</a>\r\n        </div>\r\n        <div class=\"col-2\">\r\n            <a routerLink=\"schedule-generate\" class=\"btn btn-sm btn-success mb-2\">Create\\View Schedules</a>\r\n        </div>\r\n        <div class=\"col-2\">\r\n            <a routerLink=\"auto-generate-schedules/generate\" class=\"btn btn-sm btn-success mb-2\">Generate Schedules</a>\r\n        </div>\r\n        <div class=\"col-2\">\r\n            <a routerLink=\"./\" (click)=\"onDeleteAllUserAccounts($event)\" class=\"btn btn-sm btn-success mb-2\">\r\n                <span *ngIf=\"isDeleting\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                Delete Accounts\r\n            </a>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<table class=\"table table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <th style=\"width:10%\">Name</th>\r\n            <th style=\"width:10%\">\r\n                <img src=\"./assets/images/email.png\" alt=\"\" />\r\n                Email\r\n            </th>\r\n            <th style=\"width:5%\">DOB</th>\r\n            <th style=\"width:5%\">Role</th>\r\n            <th style=\"width:15%\"></th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let account of accounts\">\r\n            <td>{{account.title}} {{account.firstName}} {{account.lastName}}</td>\r\n            <td>{{account.email}}</td>\r\n            <td>{{account.dob}}</td>\r\n            <td>{{account.role}}</td>\r\n            <td style=\"white-space: nowrap\">\r\n                <div class=\"container\">\r\n                    <div class=\"div-delete\">\r\n                        <button routerLink=\"add-edit/edit/{{account.id}}\" [disabled]=\"!account.isVerified\"\r\n                            class=\"btn btn-sm btn-primary mr-1\">Edit</button>\r\n                    </div>\r\n                    <div class=\"div-delete ms-1\" *ngIf=\"account.role !=RoleAdminEnum\">\r\n                        <button routerLink=\"function/{{account.id}}\" class=\"btn btn-sm btn-primary mr-1\"\r\n                            [disabled]=\"!account.isVerified\" >Duties</button>\r\n\r\n                    </div>\r\n                    <div class=\"div-delete  ms-1\" *ngIf=\"account.role !=RoleAdminEnum\">\r\n                        <button routerLink=\"schedule/{{account.id}}\" class=\"btn btn-sm btn-primary mr-1\"\r\n                            [disabled]=\"!account.isVerified\" >Schedule</button>\r\n                    </div>\r\n                    <div class=\"div-delete  ms-1\">\r\n                        <button (click)=\"deleteAccount(account.id)\"\r\n                            class=\"btn btn-sm btn-danger btn-delete-account\" [disabled]=\"account.isDeleting\">\r\n                            <span *ngIf=\"account.isDeleting\" class=\"spinner-border spinner-border-sm\"></span>\r\n                            <span *ngIf=\"!account.isDeleting\">Delete</span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </td>\r\n        </tr>\r\n        <tr *ngIf=\"!accounts\">\r\n            <td colspan=\"4\" class=\"text-center\">\r\n                <span class=\"spinner-border spinner-border-lg align-center\"></span>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>","import { Component, OnInit } from '@angular/core';\r\nimport { first } from 'rxjs/operators';\r\nimport { Account, Role } from 'src/app/_models';\r\nimport { AccountService, AlertService } from 'src/app/_services';\r\n\r\n@Component({ templateUrl: 'list.component.html', styleUrls: ['./list.component.less'],})\r\nexport class ListComponent implements OnInit {\r\n    accounts: Account[];\r\n    autoEmail: Boolean;\r\n    isDeleting: boolean = false;\r\n    //alertService: any;\r\n\r\n    constructor(private accountService: AccountService,\r\n        private alertService: AlertService) { }\r\n\r\n    ngOnInit() {\r\n        this.refreshList();\r\n\r\n    }\r\n\r\n    private refreshList() {\r\n        this.accountService.getAll()\r\n            .pipe(first())\r\n            .subscribe(accounts => {\r\n                this.accounts = accounts;\r\n                this.accounts.sort(function (a, b) {\r\n                    return a.role.localeCompare(b.role);\r\n                });\r\n            });\r\n        this.accountService.getAutoEmail()\r\n            .pipe(first())\r\n            .subscribe((autoEmail: any) => {\r\n                this.autoEmail = autoEmail;\r\n            });\r\n    }\r\n\r\n    deleteAccount(id: string) {\r\n        const account = this.accounts.find(x => x.id === id);\r\n        account.isDeleting = true;\r\n        this.accountService.delete(id)\r\n            .pipe(first())\r\n            .subscribe(() => {\r\n                this.accounts = this.accounts.filter(x => x.id !== id)\r\n            });\r\n    }\r\n    public get RoleAdminEnum() {\r\n        return Role.Admin;\r\n    }\r\n    public onDeleteAllUserAccounts(event: Event) {\r\n        this.isDeleting = true;\r\n        this.accountService.deleteAllUserAccounts()\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: (accounts: any) => {\r\n                    this.refreshList();\r\n                    console.log(accounts);\r\n                },\r\n                complete: () => {\r\n                    //this.alertService.info(\"Done\");\r\n                    this.isDeleting = false;\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.isDeleting = false;\r\n                }\r\n            });\r\n    }\r\n    public onChangeHandler(event: any, tr: any) {\r\n        this.accountService.setAutoEmail(new Boolean(event.target.checked))\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: (autoEmail: any) => {\r\n                    //tr.click();\r\n                    this.autoEmail = autoEmail;\r\n                },\r\n                complete: () => {\r\n                    //this.alertService.info(\"Done\");\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                }\r\n            });\r\n    }\r\n}","<fieldset>\n    <legend>{{titlePrefix}}{{functionStr}}</legend>\n    <form [formGroup]=\"form\">\n        <div class=\"row mb-4\">\n            <div class=\"col-5\">\n                <!-- <label>{{ functionStr }}</label> -->\n                <select #element formControlName=\"selectedUser\" class=\"form-select\" (change)=\"onChangeUser($event)\">\n                    <option *ngFor=\"let account of accountsAvailable4Function\"\n                        [value]=\"account.lastName + '/' \n                                + account.firstName + '/' + account.email + '/' + account.dob + '/' + getGroup(account)\">\n                        {{ account.lastName }}/{{ account.firstName }}/{{ account.email }}/{{ account.dob }}/{{ getGroup(account) }}\n                    </option>\n                </select>\n            </div>\n        </div>\n    </form>\n    <!-- <div class=\"container\">\n        <mat-form-field appearance=\"outline\">\n            <mat-label>Filter</mat-label>\n            <input matInput (keyup)=\"onApplyFilter($event.target, input)\" placeholder=\"Search columns\" #input>\n        </mat-form-field>\n    </div> -->\n    <mat-table #table [dataSource]=\"dataSource\" matSort>\n        <ng-container matColumnDef=\"firstName\">\n            <mat-header-cell *matHeaderCellDef mat-sort-header> First Name </mat-header-cell>\n            <mat-cell *matCellDef=\"let account\">\n                <input type=\"text\" matInput [value]=\"account.firstName\" readonly>\n            </mat-cell>\n\n        </ng-container>\n        <ng-container matColumnDef=\"secondName\">\n            <mat-header-cell *matHeaderCellDef mat-sort-header> Second Name </mat-header-cell>\n            <mat-cell *matCellDef=\"let account\">\n                <input type=\"text\" matInput [value]=\"account.lastName\" readonly>\n            </mat-cell>\n        </ng-container>\n        <ng-container matColumnDef=\"email\">\n            <mat-header-cell *matHeaderCellDef mat-sort-header> E-mail </mat-header-cell>\n            <mat-cell *matCellDef=\"let account\">\n                <input type=\"text\" matInput [value]=\"account.email\" readonly>\n            </mat-cell>\n        </ng-container>\n        <ng-container matColumnDef=\"group\">\n            <mat-header-cell *matHeaderCellDef mat-sort-header> Group </mat-header-cell>\n            <mat-cell *matCellDef=\"let account\">\n                <input type=\"text\" matInput [value]=\"getGroup(account)\" readonly>\n            </mat-cell>\n        </ng-container>\n        <ng-container matColumnDef=\"action\">\n            <mat-header-cell *matHeaderCellDef> Action </mat-header-cell>\n            <mat-cell *matCellDef=\"let i = index; let account\">\n                <button class=\"btn btn-sm btn-danger btn-delete-account\" type=\"button\"\n                    (click)=\"onDeleteSchedule($event, account)\" [ngClass]=\"{ 'disabled': account.isDeleting}\">\n                    <span *ngIf=\"account.isDeleting\" class=\"spinner-border spinner-border-sm mr-1\"></span> Delete\n                </button>\n            </mat-cell>\n        </ng-container>\n        <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n        <mat-row *matRowDef=\"let row; columns: displayedColumns;let i = index;\"\n            [ngClass]=\"{hovered: row.hovered, highlighted: row.highlighted}\" #tr (click)=\"onRowSelected(row, tr, i)\"\n            (mouseover)=\"row.hovered = true\" (mouseout)=\"row.hovered = false\"></mat-row>\n    </mat-table>\n\n    <mat-paginator #paginator [length]=\"accounts4DateAndFunction.length\" [pageSizeOptions]=\"[5, 10, 30, 50]\"\n        showFirstLastButtons>\n    </mat-paginator>\n\n    <button #button type=\"button\" [ngClass]=\"{ 'disabled': accountsAvailable4Function.length <= 0 }\" (click)=\"onAddSchedule($event, button)\" class=\"btn btn-primary\">\n        <span *ngIf=\"isAdding\"  class=\"spinner-border spinner-border-sm mr-1\"></span> \n        Add {{ functionStr }}\n    </button>\n</fieldset>","import { AfterViewInit, Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport * as moment from 'moment';\nimport { first } from 'rxjs/operators';\n//import { first } from 'rxjs';\nimport { Account } from 'src/app/_models';\nimport { FunctionScheduleData } from 'src/app/_models/functionscheduledata';\nimport { Schedule } from 'src/app/_models/schedule';\nimport { AccountService, AlertService } from 'src/app/_services';\nimport { Constants } from 'src/app/constants';\n\nconst COLUMNS_SCHEMA = [\n  {\n    key: \"firstName\",\n    type: \"text\",\n    label: \"First Name\"\n  },\n  {\n    key: \"secondName\",\n    type: \"text\",\n    label: \"SecondName\"\n  },\n  {\n    key: \"email\",\n    type: \"text\",\n    label: \"E-mail\"\n  },\n  {\n    key: \"group\",\n    type: \"text\",\n    label: \"ScheduleGroup\"\n  },\n  {\n    key: \"action\",\n    type: \"button\",\n    label: \"Action\"\n  },\n]\n\n@Component({\n  selector: 'app-function-schedule',\n  templateUrl: './function-schedule.component.html',\n  styleUrls: ['./function-schedule.component.less']\n})\nexport class FunctionScheduleComponent implements OnInit, AfterViewInit {\n  @ViewChild('paginator') paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  @Input() functionStr: string;\n  @Input() dateTimeStr: string;\n\n  @Output() schedulesUpdatedEmitter: EventEmitter<FunctionScheduleData>;\n\n  dateFormat = Constants.dateFormat;\n  dateTimeFormat = Constants.dateTimeFormat;\n  form: FormGroup;\n  accountsAvailable4Function: Account[] = [];\n  displayedColumns: string[] = COLUMNS_SCHEMA.map((col) => col.key);\n  columnsSchema: any = COLUMNS_SCHEMA;\n\n  /* Busy cursor flags */\n  isAdding: boolean = false;\n  accountsLoaded: boolean = true;\n\n  dataSource: MatTableDataSource<Account> = new MatTableDataSource([]);\n  currentSelectedAccount: Account = null;\n  lastSelectedAccount: Account = null;\n  selectedAccount4Function: Account;\n  accounts: Account[] = [];\n\n  private _accounts4DateAndFunction: Account[] = [];\n  titlePrefix: string = \"\";\n\n  public get accounts4DateAndFunction(): Account[] {\n    return this._accounts4DateAndFunction;\n  }\n  public set accounts4DateAndFunction(value: Account[]) {\n    this._accounts4DateAndFunction = value;\n  }\n\n  constructor(private accountService: AccountService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private alertService: AlertService) {\n    this.schedulesUpdatedEmitter = new EventEmitter<FunctionScheduleData>();\n  }\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      selectedUser: ['', [Validators.required]],\n    });\n\n  }\n  setCurrentDate(dateTime: string) {\n    this.dateTimeStr = dateTime;\n    console.log(\"Called for: for:\" + this.functionStr + \" New datetime is:\" + dateTime);\n    this.loadAccounts4DateAndFunction();\n    if (this.accounts4DateAndFunction.length > 0) {\n      var group = this.getGroup(this.accounts4DateAndFunction[0]);\n      this.loadAccounts4Function(group);\n      console.log(\"setCurrentDate\"+this.accounts4DateAndFunction);\n    }\n  }\n  ngAfterViewInit(): void {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n    this.dataSource = new MatTableDataSource();\n    this.refreshAccounts();\n  }\n  private refreshAccounts() {\n    this.accountsLoaded = false;\n    this.accountService.getAll()\n      .pipe(first())\n      .subscribe({\n        next: (accounts: Account[]) => {\n          this.accountsAvailable4Function = [];\n          this.accounts = accounts;\n\n          this.loadAccounts4Function(null);\n          this.accounts.forEach(account => {\n            account.isDeleting = false;\n          });\n          /* Select first account as the default one*/\n          if (this.selectedAccount4Function !== undefined) {\n            var selected = this.selectedAccount4Function.lastName + \"/\"\n              + this.selectedAccount4Function.firstName + \"/\"\n              + this.selectedAccount4Function.email + \"/\"\n              + this.selectedAccount4Function.dob + \"/\"\n              + this.getGroup(this.selectedAccount4Function) /* this.selectedAccount4Function.scheduleGroup */;\n            this.f['selectedUser'].setValue(selected);\n          } else if (this.accountsAvailable4Function.length > 0) {\n            var selected = this.accountsAvailable4Function[0].lastName + \"/\"\n              + this.accountsAvailable4Function[0].firstName + \"/\"\n              + this.accountsAvailable4Function[0].email + \"/\"\n              + this.accountsAvailable4Function[0].dob + \"/\"\n              + this.getGroup(this.accountsAvailable4Function[0]) /* this.accountsAvailable4Function[0].scheduleGroup */;\n            this.f['selectedUser'].setValue(selected);\n            this.selectedAccount4Function = this.accountsAvailable4Function[0];\n          }\n\n          this.loadAccounts4DateAndFunction();\n\n          /* Notify parent that we got data from server */\n          var funcSchedData: FunctionScheduleData = {\n            userFunction: this.functionStr,\n            accounts: this.accounts4DateAndFunction\n          }\n          /* Notify parrent that the data has been updated */\n          this.schedulesUpdatedEmitter.emit(funcSchedData);\n\n          /* Check if we are group task */\n          this.accountService.getGroupTasks()\n            .pipe(first())\n            .subscribe({\n              next: (groupTasks : string[]) => {\n                if(groupTasks.includes(this.functionStr))\n                {\n                  this.titlePrefix = \"Group \"\n                }\n              },\n              complete: () => {\n                this.isAdding = false;\n              },\n              error: error => {\n                this.alertService.error(error);\n                this.isAdding = false;\n              }\n            });\n\n        },\n        complete: () => {\n          this.accountsLoaded = true;\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.accountsLoaded = true;\n        }\n      });\n  }\n\n  private loadAccounts4Function(group : string) {\n    this.accountsAvailable4Function = [];\n    this.accounts.forEach(account => {\n      account.userFunctions.forEach(userFunc => {\n        if (userFunc.userFunction == this.functionStr && (group == null || userFunc.group == group)) {\n          this.accountsAvailable4Function.push(account);\n        }\n      });\n    });\n  }\n\n  private loadAccounts4DateAndFunction() {\n    this.accounts4DateAndFunction = [];\n    this.accounts.forEach(account => {\n      account.schedules.forEach(schedule => {\n        if (schedule.userFunction == this.functionStr\n          && schedule.date == this.dateTimeStr\n            /* && schedule.dob == account.dob */) {\n          this.accounts4DateAndFunction.push(account);\n        }\n      });\n    });\n    this.dataSource = new MatTableDataSource(this.accounts4DateAndFunction);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.form.controls; }\n\n  getGroup(account : Account) : string {\n    return account.userFunctions.find(x => x.userFunction == this.functionStr).group;\n  }\n\n  onChangeUser(event: Event) {\n    var valueSelected = (event.target as HTMLInputElement).value;\n    var array = valueSelected.split(\"/\");\n    this.selectedAccount4Function = this.accountsAvailable4Function.find((item) => item.email === array[2] && item.dob === array[3])\n  }\n  /* I am not sure if we need 'input' parameter - keep it for now*/\n  onApplyFilter(t: any, input: any) {\n    const target = t as HTMLTextAreaElement;\n    var filterValue = target.value;\n    filterValue = filterValue.trim(); // Remove whitespace\n    filterValue = filterValue.toLowerCase(); // Datasource defaults to lowercase matches\n    this.dataSource.filter = filterValue;\n  }\n  onAddSchedule(event: MouseEvent, button: any) {\n    this.addSchedule(this.selectedAccount4Function);\n\n  }\n  public addSchedule(account: Account) {\n    var schedule2Add: Schedule = {\n      accountId: account.id,\n      date: this.dateTimeStr,\n      newDate: this.dateTimeStr,\n      dob: account.dob,\n      required: true,\n      deleting: false,\n      userAvailability: true,\n      scheduleGroup: account.scheduleGroup,\n      userFunction: this.functionStr,\n      newUserFunction: this.functionStr,\n    };\n    this.isAdding = true;\n    this.accountService.addSchedule(account.id, schedule2Add)\n      .pipe(first())\n      .subscribe({\n        next: (account) => {\n          this.refreshAccounts();\n        },\n        complete: () => {\n          this.isAdding = false;\n        },\n        error: error => {\n          this.refreshAccounts();\n          this.alertService.error(error);\n          this.isAdding = false;\n        }\n      });\n  }\n  onDeleteSchedules(event: MouseEvent) { // rowIndex is table index\n    this.accounts4DateAndFunction.forEach(account => {\n      console.log(\"FunctionScheduleComponent deleting functionStr:\" + this.functionStr + \" dateStr:\" + this.dateTimeStr);\n      this.onDeleteSchedule(event, account);\n    });\n  }\n\n  onDeleteSchedule(event: MouseEvent, account: Account) { // rowIndex is table index\n    account.isDeleting = true;\n\n    var schedule2Delete: Schedule = {\n      accountId: account.id,\n      date: this.dateTimeStr,\n      newDate: this.dateTimeStr,\n      dob: account.dob,\n      required: true,\n      deleting: false,\n      userAvailability: true,\n      scheduleGroup: account.scheduleGroup,\n      userFunction: this.functionStr,\n      newUserFunction: this.functionStr,\n    };\n    this.accountService.deleteSchedule(account.id, schedule2Delete)\n      .pipe(first())\n      .subscribe({\n        next: (z) => {\n          console.log(\"FunctionScheduleComponent functionStr:\" + this.functionStr + \" dateStr:\" + this.dateTimeStr + \" deleted\");\n          this.refreshAccounts();\n        },\n        complete: () => {\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.refreshAccounts();\n        }\n      });\n  }\n  onRowSelected(account: Account, tr: any, index: number) {\n    account.highlighted = !account.highlighted;\n    this.currentSelectedAccount = account;\n\n    if (this.lastSelectedAccount != null) {\n      this.lastSelectedAccount.highlighted = false;\n    }\n    this.lastSelectedAccount = this.currentSelectedAccount;\n\n    if (!account.highlighted) {\n      // If row is deselected mark both schedules as deselected(null);\n      this.lastSelectedAccount = null;\n      this.currentSelectedAccount = null;\n    }\n  }\n}\n","<div class=\"d-flex justify-content-center\" *ngIf=\"!functionsLoaded\">\n    <span class=\"spinner-border spinner-border-lg align-center\"></span>\n</div>\n\n<fieldset>\n    <legend>View/Edit Schedule:</legend>\n    <div class=\"mb-3\">\n        <form [formGroup]=\"form\">\n            <div class=\"row\">\n                <div class=\"col-3\">\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>Schedule</mat-label>\n                        <input id=\"test\" formControlName=\"scheduledDateTime\" #ref matInput\n                            [ngxMatDatetimePicker]=\"picker\" placeholder=\"Choose a date\" required\n                            (dateChange)=\"onChangeDateTime($event)\" />\n                        <mat-datepicker-toggle matSuffix [for]=\"$any(picker)\"></mat-datepicker-toggle>\n                        <mat-hint>{{dateFormat}}</mat-hint>\n                        <ngx-mat-datetime-picker #picker [showSpinners]=\"true\" [showSeconds]=\"false\" [stepHour]=\"1\"\n                            [stepMinute]=\"1\" [stepSecond]=\"0\" [touchUi]=\"false\" [color]=\"undefined\"\n                            [enableMeridian]=\"false\" [disableMinute]=\"false\" [hideTime]=\"false\">\n                        </ngx-mat-datetime-picker>\n                        <mat-error *ngIf=\"f['scheduledDateTime'].errors\">Invalid DOB</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"col-2\">\n                    <button [ngClass]=\"{'disabled' : !enableCopyButton}\" #button type=\"button\"\n                        (click)=\"onCopy($event, button)\" class=\"btn btn-primary\">\n                        Copy To Buffer\n                    </button>\n                </div>\n                <div class=\"col-2\">\n                    <button [ngClass]=\"{'disabled' : !enablePasteButton}\" #button type=\"button\"\n                        (click)=\"onPaste($event, button)\" class=\"btn btn-primary\">\n                        Paste From Buffer\n                    </button>\n                </div>\n                <div class=\"col-2\">\n                    <button #button type=\"button\" (click)=\"onClear($event, button)\" class=\"btn btn-primary\">\n                        Clear Buffer\n                    </button>\n                </div>\n                <div class=\"col-3\">\n                    <input type=\"text\" class=\"no-outline\" formControlName=\"information\" id=\"Info\" name=\"Name\">\n                </div>\n            </div>\n        </form>\n    </div>\n    <div class=\" mb-3 mx-0\">\n        <div *ngFor=\"let item of functions | orderByDate: 'userFunction': 'asc' \">\n            <app-function-schedule  (schedulesUpdatedEmitter)=\"onSchedulesUpdated($event)\" #function\n                [functionStr]=item.userFunction [dateTimeStr]=\"getDateTimeStr()\"></app-function-schedule>\n        </div>\n    </div>\n</fieldset>\n\n","import { AfterViewInit, Component, ElementRef, EventEmitter, OnInit, Output, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { Subscription/* , first */ } from 'rxjs';\r\nimport { Account } from 'src/app/_models';\r\nimport { FunctionScheduleData } from 'src/app/_models/functionscheduledata';\r\nimport { ScheduleDateTimes } from 'src/app/_models/scheduledatetimes';\r\nimport { UserFunction } from 'src/app/_models/userfunction';\r\nimport { AccountService, AlertService } from 'src/app/_services';\r\nimport { Constants } from 'src/app/constants';\r\nimport { FunctionScheduleComponent } from '../function-schedule/function-schedule.component';\r\nimport { ScheduleDateTime } from 'src/app/_models/scheduledatetime';\r\nimport { first } from 'rxjs/operators';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-generate-schedules',\r\n  templateUrl: './generate-schedules.component.html',\r\n  styleUrls: ['./generate-schedules.component.less']\r\n})\r\nexport class GenerateSchedulesComponent implements OnInit, AfterViewInit {\r\n  @ViewChildren(`function`) functionComponents: QueryList<FunctionScheduleComponent>;\r\n  @ViewChild(`ref`) dateCtrl: ElementRef;\r\n  @Output() schedulesUpdatedEmitter: EventEmitter<FunctionScheduleData>;\r\n  @Output() dateTimeChangedEmitter: EventEmitter<string>;\r\n\r\n  dateFormat = Constants.dateFormat;\r\n  dateTimeFormat = Constants.dateTimeFormat;\r\n  form: FormGroup;\r\n  uploadSub: Subscription;\r\n  functions: UserFunction[] = [];\r\n  isLoaded: boolean;\r\n  fComponents: FunctionScheduleComponent[] = [];\r\n  static functions2SchedulesMap: Map<FunctionScheduleComponent, Account[]> = new Map<FunctionScheduleComponent, Account[]>();\r\n\r\n  functionsLoaded: boolean = true;\r\n  enableCopyButton: boolean = false;\r\n  enablePasteButton: boolean = false;\r\n\r\n  constructor(private accountService: AccountService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private alertService: AlertService) {\r\n      this.schedulesUpdatedEmitter = new EventEmitter<FunctionScheduleData>();\r\n      this.dateTimeChangedEmitter = new EventEmitter<string>();\r\n  }\r\n  ngAfterViewInit(): void {\r\n    this.functionComponents.changes.subscribe((comps: QueryList<FunctionScheduleComponent>) => {\r\n      /* Load `fComponent` array with all `FunctionScheduleComponent` created by html template */\r\n      comps.forEach(element => {\r\n        this.fComponents.push(element);\r\n      });\r\n      var newMap = new Map<FunctionScheduleComponent, Account[]>(GenerateSchedulesComponent.functions2SchedulesMap);\r\n      GenerateSchedulesComponent.functions2SchedulesMap.clear();\r\n      for (let entry of newMap.entries()) {\r\n        console.log(\"Key:\" + entry[0].dateTimeStr);\r\n        this.fComponents.forEach(element => {\r\n          if (element.functionStr === entry[0].functionStr) {\r\n            GenerateSchedulesComponent.functions2SchedulesMap.set(element, entry[1]);\r\n          }\r\n        });\r\n      }\r\n      /* All FunctionScheduleComponent are loaded */\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.formBuilder.group({\r\n      scheduledDateTime: [new Date(), Validators.required],\r\n      information: [, Validators.required],\r\n\r\n    });\r\n    //this.getAllDates();\r\n    this.functionsLoaded = false;\r\n    this.accountService.getTasks()\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (value: string[]) => {\r\n          //value = [\"Acolyte\", \"Cleaner\"] ;\r\n          /* Create `UserFunction` component for every function that was returned by server*/\r\n          value.forEach(element => {\r\n            var f: UserFunction = {\r\n              id: '',\r\n              userFunction: element,\r\n              group: ''\r\n            }\r\n            this.functions.push(f);\r\n          });\r\n        },\r\n        complete: () => {\r\n          this.functionsLoaded = true;\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n          this.functionsLoaded = false;\r\n        }\r\n      });\r\n    this.setCopyPasteButtons();\r\n  }\r\n\r\n  onSchedulesUpdated(data: FunctionScheduleData) {\r\n    this.setCopyPasteButtons();\r\n    this.schedulesUpdatedEmitter.emit(data);\r\n  }\r\n\r\n  onChangeDateTime(event: any) {\r\n    this.fComponents.forEach(element => {\r\n      console.log(\"Changing time to: \"+ this.getDateTimeStr());\r\n      element.setCurrentDate(this.getDateTimeStr());\r\n    });\r\n    this.setCopyPasteButtons();\r\n    this.dateTimeChangedEmitter.emit(moment(event.value).format(this.dateTimeFormat));\r\n  }\r\n  // convenience getter for easy access to form fields\r\n  get f() { return this.form.controls; }\r\n\r\n  getDateTimeStr(): string {\r\n    return moment(this.f['scheduledDateTime'].value).format(this.dateTimeFormat)\r\n  }\r\n  setCurrentDate(dateStr: string) {\r\n    this.f['scheduledDateTime'].setValue(moment(dateStr, Constants.dateTimeFormat).toDate());\r\n    // /* Trigger atrificially  `onChangeDateTime` */\r\n    // const event = new CustomEvent(\"change\", { detail: dateStr });\r\n    // (this.dateCtrl.nativeElement as HTMLInputElement).dispatchEvent(\r\n    //   event\r\n    // );\r\n    this.fComponents.forEach(element => {\r\n      console.log(\"Changing time to: \"+ this.getDateTimeStr());\r\n      element.setCurrentDate(this.getDateTimeStr());\r\n    });\r\n    this.setCopyPasteButtons();\r\n    console.log(\"Generate changing date: \" + dateStr);\r\n  }\r\n\r\n  onCopy(event: MouseEvent, button: any): Map<FunctionScheduleComponent, Account[]> {\r\n    /* Build an array of accounts schedules to be copied */\r\n    var data = this.copyChildData();\r\n    this.setCopyPasteButtons();\r\n    return data;\r\n  }\r\n  onPaste(event: MouseEvent, button: any) {\r\n    //this.functionsLoaded = false;\r\n    this.setCopyPasteButtons();\r\n    for (let entry of GenerateSchedulesComponent.functions2SchedulesMap.entries()) {\r\n      console.log(\"Key:\" + entry[0].dateTimeStr);\r\n      for (let index = 0; index < entry[1].length; index++) {\r\n        console.log(\"\\tValue:\" + entry[1][index].firstName);\r\n        /* \r\n        The entry[1] is an array of Accounts[] for specific `FunctionScheduleComponent`(entry[0]) \r\n        */\r\n        entry[0].addSchedule(entry[1][index]);\r\n      }\r\n    }\r\n    //this.functionsLoaded = true;\r\n  }\r\n  onClear(event: MouseEvent, button: any) {\r\n    GenerateSchedulesComponent.functions2SchedulesMap.clear();\r\n    this.setCopyPasteButtons();\r\n  }\r\n  onDeleteSchedules(event: MouseEvent, data : ScheduleDateTime) {\r\n    this.fComponents.forEach(element => {\r\n\r\n      /* Make sure the row is selected first so the ``dateTimeStr`` is set up properly \r\n      `functionStr` is set on creation time by this class*/\r\n      this.setCurrentDate(data.date)\r\n      \r\n\r\n      element.onDeleteSchedules(event);\r\n      console.log(\"GenerateSchedulesComponent deleting functionStr:\"+element.functionStr+\" dateStr:\"+ element.dateTimeStr);\r\n    });\r\n  }\r\n\r\n  private copyChildData(): Map<FunctionScheduleComponent, Account[]> {\r\n    GenerateSchedulesComponent.functions2SchedulesMap.clear();\r\n    this.fComponents.forEach(element => {\r\n      GenerateSchedulesComponent.functions2SchedulesMap.set(element, element.accounts4DateAndFunction);\r\n    });\r\n    return GenerateSchedulesComponent.functions2SchedulesMap;\r\n  }\r\n  private childrenData(): Map<string, Account[]> {\r\n    var array: Map<string, Account[]> = new Map<string, Account[]>();\r\n    this.fComponents.forEach(element => {\r\n      if (element.accounts4DateAndFunction.length > 0)\r\n        array.set(element.functionStr, element.accounts4DateAndFunction);\r\n    });\r\n    return array;\r\n  }\r\n  areChildrenEmpty(): boolean {\r\n    return this.childrenData().size <= 0;\r\n  }\r\n  isFunc2SchedMapdEmpty(): boolean {\r\n    return GenerateSchedulesComponent.functions2SchedulesMap.size <= 0;\r\n  }\r\n  private setCopyPasteButtons() {\r\n    if (this.isFunc2SchedMapdEmpty())\r\n      this.f['information'].setValue(\"There is no data in a buffer\");\r\n    else\r\n      this.f['information'].setValue(\"There is data in a buffer\");\r\n\r\n    if (this.areChildrenEmpty()) {\r\n      this.enableCopyButton = false;\r\n      this.enablePasteButton = this.isFunc2SchedMapdEmpty() ? false : true;\r\n    } else {\r\n      this.enableCopyButton = true;\r\n      this.enablePasteButton = false;\r\n    }\r\n  }\r\n}\r\n","<div class=\"container-fluid\">\n    <form [formGroup]=\"form\">\n        <div class=\"col mx-md-2\">\n            <a routerLink=\"../\" class=\"btn btn-primary\">Back</a>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <fieldset style=\"overflow:auto\">\n                    <legend>Schedules</legend>\n                    <div class=\"ml-3\">\n                        <label for=\"dates\" class=\"me-2\">Dates:</label>\n                        <input type=\"checkbox\" checked (change)=\"onCheckboxChange($event)\" formControlName=\"allDates\"\n                            id=\"allDates\" name=\"allDates\" value=\"\" class=\"ms-5\">\n                        <label for=\"allDates\" class=\"ps-2\">All</label><br>\n                    </div>\n                    <mat-table #table [dataSource]=\"dataSource\" matSort style=\"min-width: 800px;\">\n                        <ng-container matColumnDef=\"date\">\n                            <mat-header-cell *matHeaderCellDef mat-sort-header> Date </mat-header-cell>\n                            <mat-cell *matCellDef=\"let row\">\n                                <input type=\"text\" matInput [value]=\"row.date\" readonly>\n                            </mat-cell>\n                        </ng-container>\n                        <ng-container matColumnDef=\"day\">\n                            <mat-header-cell *matHeaderCellDef mat-sort-header> Day </mat-header-cell>\n                            <mat-cell *matCellDef=\"let row\">\n                                <input type=\"text\" matInput [value]=\"row.day\" readonly>\n                            </mat-cell>\n                        </ng-container>\n                        <ng-container matColumnDef=\"delete\">\n                            <mat-header-cell *matHeaderCellDef mat-sort-header> Delete </mat-header-cell>\n                            <mat-cell *matCellDef=\"let row\">\n                                <button class=\"btn btn-sm btn-danger btn-delete-account\" type=\"button\" #button\n                                    (click)=\"onDeleteSchedules($event, row)\" [ngClass]=\"{ 'disabled': row.isDeleting}\">\n                                    <span *ngIf=\"row.isDeleting\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                                    Delete\n                                </button>\n                            </mat-cell>\n                        </ng-container>\n\n\n\n\n                        <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                        <mat-row *matRowDef=\"let row; columns: displayedColumns;let i = index;\"\n                            [ngClass]=\"{hovered: row.hovered, highlighted: row.highlighted}\" #tr\n                            (click)=\"onRowSelected(row)\" (mouseover)=\"row.hovered = true\"\n                            (mouseout)=\"row.hovered = false\"></mat-row>\n                    </mat-table>\n                    <mat-paginator #paginator [length]=\"futureScheduleDateStrings.length\"\n                        [pageSizeOptions]=\"[5,10, 20, 50, 100]\" showFirstLastButtons>\n                    </mat-paginator>\n                </fieldset>\n\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <app-generate-schedules (dateTimeChangedEmitter)=\"dateTimeChanged($event)\"\n                    (schedulesUpdatedEmitter)=\"onSchedulesUpdated($event)\" #scheduleDate></app-generate-schedules>\n            </div>\n        </div>\n        <div class=\"col px-md-2\">\n            <a routerLink=\"../\" class=\"btn btn-primary\">Back</a>\n        </div>\n    </form>\n</div>","\r\nimport { Component, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport * as moment from 'moment';\r\nimport { first } from 'rxjs/operators';\r\nimport { FunctionScheduleData } from 'src/app/_models/functionscheduledata';\r\nimport { ScheduleDateTime } from 'src/app/_models/scheduledatetime';\r\nimport { ScheduleDateTimes } from 'src/app/_models/scheduledatetimes';\r\nimport { Team } from 'src/app/_models/team';\r\nimport { DateFunctionTeams } from 'src/app/_models/teams';\r\nimport { AccountService } from 'src/app/_services';\r\nimport { Constants } from 'src/app/constants';\r\nimport { GenerateSchedulesComponent } from '../generate-schedules/generate-schedules.component';\r\nconst COLUMNS_SCHEMA = [\r\n  {\r\n    key: \"date\",\r\n    type: \"text\",\r\n    label: \"Date\"\r\n  }, {\r\n    key: \"day\",\r\n    type: \"text\",\r\n    label: \"Day\"\r\n  }, {\r\n    key: \"delete\",\r\n    type: \"text\",\r\n    label: \"Delete\"\r\n  },\r\n]\r\n\r\n@Component({\r\n  selector: 'app-main-scheduler',\r\n  templateUrl: './main-scheduler.component.html',\r\n  styleUrls: ['./main-scheduler.component.less']\r\n})\r\nexport class MainSchedulerComponent {\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  @ViewChild(`scheduleDate`) generateScheduleComponent: GenerateSchedulesComponent;\r\n\r\n  form: FormGroup;\r\n  list: ScheduleDateTime[] = [];\r\n  futureScheduleDateStrings: string[] = [];\r\n\r\n  dateSelected: string;\r\n  isLoaded: boolean = false;\r\n\r\n  isUsersLoaded: boolean = false;\r\n  //teams: Team[] = [];\r\n  scheduleDateTime: ScheduleDateTime[] = [];\r\n\r\n  displayedColumns: string[] = COLUMNS_SCHEMA.map((col) => col.key);\r\n  columnsSchema: any = COLUMNS_SCHEMA;\r\n  dataSource: MatTableDataSource<ScheduleDateTime> = new MatTableDataSource();\r\n\r\n  currentSelectedAccount: ScheduleDateTime = null;\r\n  lastSelectedAccount: ScheduleDateTime = null;\r\n  highlighted: boolean;\r\n  futureScheduleDates: ScheduleDateTime[] = [];\r\n\r\n  constructor(private accountService: AccountService,\r\n    private formBuilder: FormBuilder) {\r\n  }\r\n  ngAfterViewInit(): void {\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n    this.dataSource = new MatTableDataSource();\r\n\r\n    this.getAllDates();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.formBuilder.group({\r\n      dates: ['', [Validators.required, this.dateValidator]],\r\n      allDates: [true, '',]\r\n    });\r\n  }\r\n  onCheckboxChange(event: any) {\r\n    this.getAllDates();\r\n  }\r\n\r\n  get f() {\r\n    return this.form.controls;\r\n  }\r\n\r\n\r\n  getAllDates() {\r\n    this.accountService.getAllDates()\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (value: ScheduleDateTimes) => {\r\n          this.futureScheduleDateStrings = [];\r\n          this.list = [];\r\n          this.futureScheduleDates = [];\r\n          this.scheduleDateTime = value.scheduleDateTimes;\r\n          console.assert(this.list.length <= 0, \"list not empty\");\r\n\r\n\r\n          for (let index = 0; index < value.scheduleDateTimes.length; index++) {\r\n            // Add server side dates\r\n            this.list.push(value.scheduleDateTimes[index])\r\n          }\r\n          this.list.sort(function (a, b) {\r\n            var aDate = moment(a.date, Constants.dateTimeFormat).toDate();\r\n            var bDate = moment(b.date, Constants.dateTimeFormat).toDate();\r\n            if (aDate > bDate) return 1\r\n            if (aDate < bDate) return -1\r\n            return 0\r\n          });\r\n\r\n          // Convert dates to date strings and optionally filter out past date strings\r\n          for (let index = 0; index < this.list.length; index++) {\r\n            var nowMs = Date.now();\r\n            const scheduleServerDate = moment(this.list[index].date).toDate();\r\n            var scheduleLocalDateStr = moment(scheduleServerDate).format(Constants.dateTimeFormat);\r\n            var scheduleMs = scheduleServerDate.getTime();\r\n\r\n            if (this.f['allDates'].value || scheduleMs > nowMs) {\r\n              this.futureScheduleDateStrings.push(scheduleLocalDateStr + \"/\" + this.getDayStrFromDate(scheduleLocalDateStr));\r\n\r\n              var futureScheduleDate: ScheduleDateTime = {\r\n                id: '',\r\n                date: scheduleLocalDateStr,\r\n                highlighted: false,\r\n                isDeleting: false,\r\n                day: this.getDayStrFromDate(scheduleLocalDateStr),\r\n              }\r\n              this.futureScheduleDates.push(futureScheduleDate);\r\n            }\r\n            // if(this.futureScheduleDates.length > 0)\r\n            //   this.generateScheduleComponent.setCurrentDate(this.futureScheduleDates[0].date);\r\n          }\r\n          this.dataSource = new MatTableDataSource(this.futureScheduleDates);\r\n          this.dataSource.paginator = this.paginator;\r\n          this.dataSource.sort = this.sort;\r\n          this.isLoaded = true;\r\n        },\r\n        error: error => {\r\n          console.log();\r\n        }\r\n      });\r\n  }\r\n  getDayStrFromDate(dateStr: string): string {\r\n    var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    var date = moment(dateStr, Constants.dateTimeFormat).toDate();\r\n    return days[date.getDay()];\r\n  }\r\n  dateValidator(control: FormControl): { [s: string]: boolean } {\r\n    var test = control.value.match(/^\\d/);\r\n    if (!test) {\r\n      return { invalidDate: true };\r\n    }\r\n    return null;\r\n  }\r\n  onSchedulesUpdated(data: FunctionScheduleData) {\r\n    this.getAllDates();\r\n  }\r\n  onRowSelected(scheduleDateTime: ScheduleDateTime) {\r\n    console.log(\"MainSchedulerComponent row selected\");\r\n\r\n    /* Find out if element is from  `this.futureScheduleDates` */\r\n    var found = false;\r\n    for (let index = 0; index < this.futureScheduleDates.length; index++) {\r\n      const element = this.futureScheduleDates[index];\r\n      if (scheduleDateTime.date === element.date) {\r\n        found = true;\r\n        this.currentSelectedAccount = element;\r\n        break;\r\n      }\r\n    }\r\n    if (this.currentSelectedAccount) {\r\n      this.currentSelectedAccount.highlighted = !this.currentSelectedAccount.highlighted;\r\n\r\n      if (!found) {\r\n        /* Deselect it */\r\n        this.currentSelectedAccount.highlighted = false;\r\n      }\r\n\r\n      if (found) {\r\n        /* Trigger `dateTimeChanged` on every `FunctionScheduleComponent` component (via `GenerateSchedulesComponent`) */\r\n        this.generateScheduleComponent.setCurrentDate(this.currentSelectedAccount.date);\r\n      }\r\n    }\r\n    // scheduleDateTime.highlighted = !scheduleDateTime.highlighted;\r\n    // this.currentSelectedAccount = scheduleDateTime;\r\n\r\n\r\n\r\n    if (this.lastSelectedAccount != null) {\r\n      this.lastSelectedAccount.highlighted = false;\r\n    }\r\n    this.lastSelectedAccount = this.currentSelectedAccount;\r\n\r\n    if (this.currentSelectedAccount && !this.currentSelectedAccount.highlighted) {\r\n      // If row is deselected mark both schedules as deselected(null);\r\n      this.lastSelectedAccount = null;\r\n      this.currentSelectedAccount = null;\r\n    }\r\n    //this.selectSchedules4Date(date.date);\r\n  }\r\n  dateTimeChanged(date: string) {\r\n\r\n    var futureScheduleDate: ScheduleDateTime = {\r\n      id: '',\r\n      date: date,\r\n      highlighted: false,\r\n      isDeleting: false,\r\n      day: this.getDayStrFromDate(date),\r\n    }\r\n    this.onRowSelected(futureScheduleDate);\r\n\r\n    // if (this.currentSelectedAccount) {\r\n    //   // Reset selection\r\n    //   this.currentSelectedAccount.highlighted = !this.currentSelectedAccount.highlighted;\r\n    //   if (!this.currentSelectedAccount.highlighted) {\r\n    //     this.lastSelectedAccount = null;\r\n    //     this.currentSelectedAccount = null;\r\n    //   }\r\n    // }\r\n  }\r\n\r\n\r\n  // selectSchedules4Date(value: string): void {\r\n  //   this.dateSelected = value;\r\n  //   if (this.futureScheduleDateStrings.length <= 0)\r\n  //     return;\r\n\r\n  //   this.accountService.getTeamsByFunctionForDate(value)\r\n  //     .pipe(first())\r\n  //     .subscribe({\r\n  //       next: (dateFunctionTeams: DateFunctionTeams) => {\r\n  //         this.teams = dateFunctionTeams.dateFunctionTeams;\r\n  //       },\r\n  //       error: error => {\r\n  //         console.log();\r\n  //       }\r\n  //     });\r\n  // }\r\n  onDeleteSchedules(event: MouseEvent, data: ScheduleDateTime) {\r\n    console.log(\"MainSchedulerComponent deleting called\");\r\n    data.isDeleting = true;\r\n    this.generateScheduleComponent.onDeleteSchedules(event, data);\r\n  }\r\n\r\n}\r\n","\r\n\r\n\r\n    <form [formGroup]=\"form\" *ngIf=\"isLoaded && !isAdmin\">\r\n    <div class=\"row\">\r\n        <div class=\"mb-3 col-5\">\r\n            <label>Define schedules for {{account.firstName}} {{account.lastName}}</label>\r\n        </div>\r\n    </div>\r\n\r\n    \r\n    <fieldset>\r\n        <legend>Date & Duty:</legend>\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"mb-3 col-6\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Schedule</mat-label>\r\n                        <input formControlName=\"scheduledDate\" #ref matInput [ngxMatDatetimePicker]=\"picker\"\r\n                            placeholder=\"Choose a date\" required />\r\n                        <mat-datepicker-toggle matSuffix [for]=\"$any(picker)\"></mat-datepicker-toggle>\r\n                        <mat-hint>{{dateFormat}}</mat-hint>\r\n                        <ngx-mat-datetime-picker #picker [showSpinners]=\"true\" [showSeconds]=\"false\" [stepHour]=\"1\"\r\n                            [stepMinute]=\"1\" [stepSecond]=\"0\" [touchUi]=\"false\" [color]=\"undefined\"\r\n                            [enableMeridian]=\"false\" [disableMinute]=\"false\" [hideTime]=\"false\">\r\n                        </ngx-mat-datetime-picker>\r\n                        <mat-error *ngIf=\"f['scheduledDate'].errors\">Invalid DOB</mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"container\">\r\n            <div class=\"row equal\">\r\n                <div class=\"mb-3 col-3\">\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Duty</mat-label>\r\n                        <mat-select formControlName=\"function\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && f['function'].errors }\"\r\n                            (selectionChange)=\"onDutyChanged($event)\" required>\r\n                            <mat-option *ngFor=\"let item of userFunctions\" [value]=item.userFunction>\r\n                                {{ item.userFunction }}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                        <mat-error *ngIf=\"submitted && form.controls['function'].hasError('invalidFunction')\"\r\n                            class=\"alert alert-danger\">\r\n                            Duty can't be empty\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div class=\"mb-3 col-3\" *ngIf=isCleaner>\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Team</mat-label>\r\n                        <input type=\"text\" #groupData matInput class=\"form-control\" formControlName=\"cleanerGroup\" placeholder=\"Specify a group\" [readonly]=\"isReadOnly\"/>\r\n                        <mat-error *ngIf=\"f['cleanerGroup'].enabled && f['cleanerGroup'].hasError('required')\">The field is required</mat-error>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <div class=\"mb-3\" *ngIf=\"isLoggedAsAdmin\">\r\n            <button type=\"button\" (click)=\"onAddSchedule()\" class=\"btn btn-primary\"\r\n                [ngClass]=\"{ 'disabled': !form.controls['scheduledDate'].valid}\">\r\n                <span *ngIf=\"isAdding\" class=\"spinner-border spinner-border-sm mr-1\"></span> Add\r\n            </button>\r\n            &nbsp;\r\n        </div>\r\n    </fieldset>\r\n</form>\r\n\r\n<fieldset>\r\n    <legend>Assigned Dates:</legend>\r\n\r\n    <div class=\"container\">\r\n        <mat-form-field appearance=\"outline\">\r\n            <mat-label>Filter</mat-label>\r\n            <input matInput (keyup)=\"applyFilter($event.target, input)\" placeholder=\"Search columns\" #input>\r\n        </mat-form-field>\r\n    </div>\r\n\r\n    <mat-table #table [dataSource]=\"dataSource\" matSort style=\"min-width: 800px;\">\r\n\r\n        <ng-container matColumnDef=\"date\">\r\n            <mat-header-cell *matHeaderCellDef mat-sort-header> Date </mat-header-cell>\r\n            <mat-cell *matCellDef=\"let schedule\">\r\n                <!--mat-form-field appearance=\"outline\"-->\r\n                <input type=\"text\" matInput (dateChange)=\"onDateChanged($event, schedule)\"\r\n                    [value]=\"schedule.date\" readonly>\r\n\r\n                <!-- The code below adds date/time picker - which right now I don't want -->\r\n                <!-- <input matInput [ngxMatDatetimePicker]=\"picker\" (dateChange)=\"onDateChanged($event, schedule)\"\r\n                        [value]=\"schedule.date\" [readonly]=\"true\">\r\n                    <mat-datepicker-toggle matIconSuffix [for]=\"$any(picker)\"></mat-datepicker-toggle>\r\n                    <ngx-mat-datetime-picker #picker [showSpinners]=\"true\" [showSeconds]=\"false\" [stepHour]=\"1\"\r\n                        [stepMinute]=\"1\" [stepSecond]=\"1\" [touchUi]=\"true\" [color]=\"color\" [enableMeridian]=\"false\"\r\n                        [disableMinute]=\"false\" [hideTime]=\"false\">\r\n                    </ngx-mat-datetime-picker> -->\r\n                <!--/mat-form-field-->\r\n            </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"userFunction\">\r\n            <mat-header-cell *matHeaderCellDef mat-sort-header> Duty </mat-header-cell>\r\n            <mat-cell *matCellDef=\"let schedule\">\r\n                <!--mat-form-field appearance=\"outline\"-->\r\n                <input type=\"text\" #data matInput placeholder=\"None\" [value]=\"schedule.userFunction\"\r\n                    (selectionChange)=\"onUserFunctionChanged($event, schedule)\" readonly />\r\n                <!-- <mat-select placeholder={{schedule.userFunction}} (selectionChange)=\"onUserFunctionChanged($event, schedule)\">\r\n                        <mat-option *ngFor=\"let f of userFunctions\" [value]=\"f.userFunction\">\r\n                            {{ f.userFunction }}\r\n                        </mat-option>\r\n                    </mat-select> -->\r\n                <!--/mat-form-field-->\r\n            </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"scheduleGroup\">\r\n            <mat-header-cell *matHeaderCellDef mat-sort-header> Team </mat-header-cell>\r\n            <mat-cell *matCellDef=\"let i = index;let schedule\">\r\n                <!--mat-form-field appearance=\"outline\"-->\r\n                <span *ngIf=\"schedule.scheduleGroup == undefined\">\r\n                    <input type=\"text\" #data matInput placeholder=\"None\" [value]=\"\"\r\n                        (keydown.enter)=\"onCleanerGroupPressed($event)\" readonly />\r\n                </span>\r\n                <span *ngIf=\"schedule.scheduleGroup != undefined\">\r\n                    <input type=\"text\" #data matInput placeholder=\"None\" [value]=\"schedule.scheduleGroup\"\r\n                        (keydown.enter)=\"onCleanerGroupPressed($event)\" readonly />\r\n                </span>\r\n                <!--/mat-form-field-->\r\n            </mat-cell>\r\n        </ng-container>\r\n\r\n\r\n        <ng-container matColumnDef=\"action\">\r\n            <mat-header-cell *matHeaderCellDef> Action </mat-header-cell>\r\n            <mat-cell *matCellDef=\"let rowIndex = index; let schedule;\">\r\n                <button mat-raised-button color=\"warn\" (click)=\"onDeleteSchedule(rowIndex, schedule)\">\r\n                    <span *ngIf=\"schedule.deleting\" class=\"spinner-border spinner-border-sm mr-1\"></span>Delete\r\n                </button>\r\n            </mat-cell>\r\n        </ng-container>\r\n        <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n        <mat-row *matRowDef=\"let row; columns: displayedColumns;let i = index;\"\r\n            [ngClass]=\"{hovered: row.hovered, highlighted: row.highlighted}\" #tr (click)=\"onRowSelected(row, tr, i)\"\r\n            (mouseover)=\"row.hovered = true\" (mouseout)=\"row.hovered = false\"></mat-row>\r\n\r\n    </mat-table>\r\n\r\n    <mat-paginator #paginator [length]=\"schedules.length\" [pageSizeOptions]=\"[5, 30, 50, 100]\" showFirstLastButtons>\r\n    </mat-paginator>\r\n</fieldset>\r\n\r\n<div type=\"button\" class=\"mb-3\">\r\n    <a routerLink=\"/admin/accounts\" class=\"btn btn-primary\">Back</a>\r\n</div>\r\n<div class=\"row mt-3\"></div>","import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, EventEmitter, OnInit, Output, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as moment from 'moment';\r\nimport { first } from 'rxjs/operators';\r\nimport { Account, Role } from 'src/app/_models';\r\nimport { Schedule } from 'src/app/_models/schedule';\r\nimport { SchedulePoolElement } from 'src/app/_models/schedulepoolelement';\r\nimport { UserFunction } from 'src/app/_models/userfunction';\r\nimport { AccountService, AlertService } from 'src/app/_services';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\nimport { UpperCasePipe } from '@angular/common';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort, MatSortable } from '@angular/material/sort';\r\nimport * as signalR from '@microsoft/signalr';\r\nimport { Constants } from '../../constants';\r\n\r\nconst COLUMNS_SCHEMA = [\r\n  {\r\n    key: \"date\",\r\n    type: \"Date\",\r\n    label: \"Date\"\r\n  },\r\n  {\r\n    key: \"userFunction\",\r\n    type: \"text\",\r\n    label: \"Duty\"\r\n  },\r\n  {\r\n    key: \"scheduleGroup\",\r\n    type: \"text\",\r\n    label: \"Group\"\r\n  },\r\n  {\r\n    key: \"action\",\r\n    type: \"button\",\r\n    label: \"Action\"\r\n  },\r\n]\r\n\r\n@Component({\r\n  templateUrl: './schedule.allocator.component.html',\r\n  styleUrls: ['./schedule.allocator.component.less'],\r\n})\r\n\r\nexport class ScheduleAllocatorComponent implements OnInit, AfterViewInit {\r\n\r\n  @ViewChild('paginator') paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  readonly CLEANER_STR = Constants.CLEANER_STR;\r\n\r\n  dateFormat = Constants.dateTimeFormat;\r\n  dateTimeFormat = Constants.dateTimeFormat;\r\n\r\n  form: FormGroup;\r\n  @Output() onScheduledAdded: EventEmitter<any>;\r\n  id: string;\r\n\r\n  dataSource: MatTableDataSource<Schedule>;\r\n\r\n  schedules: Schedule[] = [];\r\n  userFunctionIndexer: number = 0;\r\n  functions: string[] = [];\r\n  submitted = false;\r\n  accountService: AccountService;\r\n  account: Account;\r\n  isLoaded: boolean = false;\r\n  isAdding: boolean = false;\r\n  isUpdating: boolean = false;\r\n\r\n  displayedColumns: string[] = COLUMNS_SCHEMA.map((col) => col.key);\r\n  columnsSchema: any = COLUMNS_SCHEMA;\r\n\r\n  userFunctions: UserFunction[] = [];\r\n\r\n  isLoggedAsAdmin: boolean = false;\r\n\r\n  currentSelectedSchedule : Schedule = null;\r\n  lastSelectedSchedule : Schedule = null;\r\n  idx : number;\r\n\r\n  poolElements: SchedulePoolElement[] = [];\r\n  public color: ThemePalette = 'primary';\r\n\r\n  groupTask : string = \"G\";\r\n\r\n  connection: signalR.HubConnection;\r\n\r\n  constructor(accountService: AccountService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private alertService: AlertService,\r\n    private cdr: ChangeDetectorRef,\r\n    private uppercasePipe: UpperCasePipe) {\r\n\r\n    this.accountService = accountService;\r\n    this.onScheduledAdded = new EventEmitter();\r\n\r\n    this.isLoggedAsAdmin = this.accountService.isAdmin();\r\n\r\n    this.connection = new signalR.HubConnectionBuilder()\r\n      .configureLogging(signalR.LogLevel.Information)\r\n      .withUrl(environment.baseUrl + '/update')\r\n      .build();\r\n\r\n    this.connection.start().then(function () {\r\n      console.log('SignalR Connected!');\r\n    }).catch(function (err) {\r\n      return console.error(err.toString());\r\n    });\r\n\r\n    this.connection.on(\"SendUpdate\", (id: number) => {\r\n      this.updateSchedulesFromServer();\r\n    });\r\n\r\n    this.form = this.formBuilder.group({\r\n      scheduledDate: ['', Validators.required],\r\n      cleanerGroup: ['K', ] ,\r\n      function: ['', [Validators.required, this.functionValidator]],\r\n    });\r\n\r\n  }\r\n  ngAfterViewInit(): void {\r\n    this.accountService.getById(this.id)\r\n      .pipe(first())\r\n        .subscribe(account => {\r\n\r\n        this.account = account;\r\n\r\n        this.accountService.getTasks()\r\n          .pipe(first())\r\n          .subscribe({\r\n            next: (value) => {\r\n              this.functions = value;\r\n              this.initSchedules(account);\r\n\r\n              // Initial sorting by date\r\n              this.sort.sort(({ id: 'date', start: 'asc' }) as MatSortable);\r\n\r\n              this.userFunctions = account.userFunctions.slice();\r\n\r\n              this.form.get('scheduledDate').setValue(new Date());\r\n              if (this.userFunctions.length > 0) {\r\n                this.form.get('function').setValue(this.userFunctions[0].userFunction);\r\n              }\r\n              if (!this.isCleaner) {\r\n                this.form.get('cleanerGroup').disable();\r\n              } else {\r\n                this.form.get('cleanerGroup').addValidators(Validators.required);\r\n                this.form.get('cleanerGroup').addValidators(Validators.minLength(1));\r\n                this.form.get('cleanerGroup').setValue(account.scheduleGroup);\r\n              }\r\n\r\n              this.account = account;\r\n              this.onScheduledAdded.emit(this.schedules);\r\n              this.userFunctionIndexer = account.userFunctions.length > 0 ? parseInt(account.userFunctions[account.userFunctions.length - 1].id) : 0;\r\n\r\n              this.isLoaded = true;\r\n\r\n              this.f[\"cleanerGroup\"].setValue(this.group);\r\n\r\n              //this.groupTask = this.group;\r\n            },\r\n            error: error => {\r\n              this.alertService.error(error);\r\n            }\r\n          });\r\n      });\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.id = this.route.snapshot.params['id'];\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    console.log(\"Called\");\r\n    this.connection.stop().\r\n    catch((err) => \r\n      console.error(err.toString())\r\n    );\r\n  }\r\n  /* I am not sure if we need 'input' parameter - keep it for now*/\r\n  applyFilter(t: any, input: any) {\r\n    const target = t as HTMLTextAreaElement;\r\n    var filterValue = target.value;\r\n    filterValue = filterValue.trim(); // Remove whitespace\r\n    filterValue = filterValue.toLowerCase(); // Datasource defaults to lowercase matches\r\n    this.dataSource.filter = filterValue;\r\n  }\r\n\r\n  functionValidator(control: FormControl): { [s: string]: boolean } {\r\n    if (control.value === '') {\r\n      return { invalidFunction: true };\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  onDutyChanged(event: any) {\r\n    if(event.value == this.CLEANER_STR) {\r\n      this.form.get('cleanerGroup').enable();\r\n      this.f[\"cleanerGroup\"].setValue(this.group);\r\n    } else {\r\n      this.form.get('cleanerGroup').disable();\r\n    }\r\n  }\r\n  // convenience getter for easy access to form fields\r\n  get f() { return this.form.controls; }\r\n\r\n  onAddSchedule() {\r\n\r\n    this.submitted = true;\r\n\r\n    // reset alerts on submit\r\n    this.alertService.clear();\r\n\r\n    // stop here if form is invalid\r\n    if (this.form.invalid) {\r\n      this.form.markAsTouched(); //markAllAsTouched();\r\n      this.f['cleanerGroup'].markAsTouched();\r\n      return;\r\n    }\r\n\r\n    var schedule = this.createSchedule('scheduledDate', 'function');\r\n    if (schedule == null)\r\n      return; // Already exists\r\n\r\n    this.isAdding = true;\r\n    this.accountService.addSchedule(this.account.id, schedule)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (account) => {\r\n          this.updateSchedulesFromServer();\r\n          this.initSchedules(account);\r\n        },\r\n        complete: () => {\r\n          this.isAdding = false;\r\n        },\r\n        error: error => {\r\n          this.updateSchedulesFromServer();\r\n          this.alertService.error(error);\r\n          this.isAdding = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  onInputFunc(date: HTMLInputElement, event : any ) {\r\n    var k = event.key;\r\n    \r\n    var retVal = this.uppercasePipe.transform(event.key);\r\n    return retVal;\r\n  }\r\n  createSchedule(dateStr: string, functionStr: string): Schedule {\r\n    var formDate = new Date(this.form.controls[dateStr].value);\r\n    formDate.setSeconds(0); // Re-set seconds to zero\r\n    var formTimeStr = moment(formDate).format(Constants.dateTimeFormat);\r\n\r\n    var formFunction = this.form.controls[functionStr].value;\r\n\r\n    for (let index = 0; index < this.schedules.length; index++) {\r\n      var scheduleTime = new Date(this.schedules[index].date).getTime();\r\n      var scheduleTimeStr = this.schedules[index].date;\r\n\r\n      var scheduleFunction = this.schedules[index].userFunction;\r\n      if (scheduleTimeStr == formTimeStr && scheduleFunction == formFunction) {\r\n        this.alertService.warn(\"The user is already \" + scheduleFunction + \" for that date/time\");\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var scheduleGroupVal = \"\";\r\n    if (this.form.controls['cleanerGroup'].enabled) {\r\n      scheduleGroupVal = this.form.controls['cleanerGroup'].value;\r\n    }\r\n    var schedule: Schedule = {\r\n      accountId: this.account.id,\r\n      date: formTimeStr,\r\n      newDate: formTimeStr,\r\n      dob: this.account.dob,\r\n      required: true,\r\n      deleting: false,\r\n      userAvailability: true,\r\n      scheduleGroup: scheduleGroupVal,\r\n      userFunction: this.form.controls[functionStr].value,\r\n      newUserFunction: this.form.controls[functionStr].value\r\n    }\r\n    return schedule;\r\n  }\r\n  onDeleteSchedule(rowIndex: string, schedule2Delete: Schedule) { // rowIndex is table index\r\n    schedule2Delete.deleting = true;\r\n    this.accountService.deleteSchedule(this.account.id, schedule2Delete)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (account) => {\r\n          this.updateSchedulesFromServer();\r\n        },\r\n        complete: () => {\r\n          schedule2Delete.deleting = false;\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n          schedule2Delete.deleting = false;\r\n          this.updateSchedulesFromServer();\r\n        }\r\n      });\r\n  }\r\n\r\n  updateSchedulesFromServer() {\r\n    this.accountService.getById(this.id)\r\n      .pipe(first())\r\n      .subscribe(account => {\r\n\r\n        this.accountService.getTasks()\r\n          .pipe(first())\r\n          .subscribe({\r\n            next: (value) => {\r\n              this.functions = value;\r\n              this.initSchedules(account);\r\n            },\r\n            error: error => {\r\n              this.alertService.error(error);\r\n            }\r\n          });\r\n      });\r\n  }\r\n\r\n  onDateChanged(event: any, schedule: Schedule) {\r\n    var dateTime = event.value;\r\n    var t = typeof (dateTime === 'Date');\r\n\r\n    var newDate: Date = event.value.toDate(); // Convert moment to Date\r\n    schedule.newDate = newDate.setSeconds(0).toString();\r\n    //schedule.newDate.setSeconds(0); // Little trick which does what mat angular should have done - reset seconds\r\n    schedule.newUserFunction = schedule.userFunction;\r\n\r\n    this.updateSchedules(schedule);\r\n  }\r\n  onUserFunctionChanged(event: any, schedule: Schedule) {\r\n    var funcName = event.value;\r\n    var t = typeof (funcName === 'string');\r\n\r\n    schedule.newUserFunction = event.value;\r\n    schedule.newDate = schedule.date;\r\n\r\n    this.updateSchedules(schedule);\r\n  }\r\n\r\n  onCleanerGroupPressed(event : any) {\r\n    console.log(\"You entered: \", event.target.value);\r\n  }\r\n\r\n  updateSchedules(schedule: Schedule) {\r\n    this.isUpdating = true;\r\n    // reset alerts on submit\r\n    this.alertService.clear();\r\n\r\n    this.accountService.updateSchedule(this.account.id, schedule)\r\n      .pipe(first())\r\n      .subscribe({\r\n        next: (account) => {\r\n          console.log(account);\r\n          this.initSchedules(account);\r\n        },\r\n        complete: () => {\r\n          this.isUpdating = false;\r\n        },\r\n        error: error => {\r\n          this.alertService.error(error);\r\n          this.isUpdating = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  onRowSelected(schedule: Schedule, tr: any, index : number) {\r\n    schedule.highlighted = !schedule.highlighted;\r\n    this.currentSelectedSchedule = schedule;\r\n\r\n    if (!schedule.deleting) {\r\n      var date = moment(schedule.date, Constants.dateTimeFormat).toDate();\r\n      this.form.get('scheduledDate').setValue(date);\r\n      this.form.get('function').setValue(schedule.userFunction);\r\n      this.form.get('cleanerGroup').setValue(schedule.scheduleGroup);\r\n    }\r\n    if(this.lastSelectedSchedule != null) {\r\n      this.lastSelectedSchedule.highlighted = false;\r\n    }\r\n    this.lastSelectedSchedule = this.currentSelectedSchedule;\r\n\r\n    if(!schedule.highlighted) {\r\n      // If row is deselected mark both schedules as deselected(null);\r\n      this.lastSelectedSchedule = null;\r\n    this.currentSelectedSchedule = null;\r\n    }\r\n  } \r\n\r\n  initSchedules(account: Account) {\r\n    var date = \r\n    this.schedules = account.schedules.slice();\r\n    // Fix up the date string for the schedules\r\n    this.schedules.forEach(element => {\r\n      var date = new Date(element.date);\r\n      var dateTimeStr = moment(date).format(Constants.dateTimeFormat);\r\n      element.date = dateTimeStr;\r\n    }); \r\n\r\n    this.dataSource = new MatTableDataSource(this.schedules);\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n\r\n  }\r\n  get isAdmin() {\r\n    return this.account.role == Role.Admin;\r\n  }\r\n  get isCleaner() {\r\n    if(this.form == undefined)\r\n     return false;\r\n    return this.form.get('function').value === this.CLEANER_STR\r\n  }\r\n  get group() : string {\r\n    var fun = this.account.userFunctions.find(f => {\r\n      // console.log(f);\r\n      return f.group.length > 0\r\n    });\r\n    if (fun != null)\r\n      return fun.group\r\n    else\r\n      return \"\";\r\n  }\r\n  get isReadOnly() : boolean {\r\n    return this.group.length > 0;\r\n  }\r\n}\r\n","<fieldset>\n    <legend>Upload Accounts</legend>\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"mb-3 col-6\">\n                <div class=\"file-upload\">\n\n                    {{fileName || \"No file uploaded yet.\"}}\n\n                    <button type=\"button\" color=\"primary\" class=\"btn btn-primary upload-button\"\n                        (click)=\"fileUpload.click()\">\n                        <img src=\"./assets/images/Upload.png\" />\n                    </button>\n\n                </div>\n                <form method=\"post\" enctype=\"multipart/form-data\">\n                    <div>\n                        <!-- <label for=\"file\">Choose file to upload</label> -->\n                        <input type=\"file\" class=\"file-input\" #fileUpload accept=\".xlsx\" required\n                            (change)=\"onFileSelected($event)\" />\n                    </div>\n                </form>\n            </div>\n            <div >\n                <div class=\"row\">\n                    <div class=\"col-1\">\n                        <button [disabled]=\"!fileHasBeenSelected || submitted\" (click)=\"onSubmit($event, fileUpload)\"\n                            class=\"btn btn-primary\">Submit</button>\n                    </div>\n                    <div class=\"col-1\">\n                        <a routerLink=\"../\" class=\"btn btn-primary\">Back</a>\n                    </div>\n                </div>\n            </div>\n\n            <div *ngIf=\"submitted\" col-12>\n                <label for=\"file\">File progress:</label>\n                <progress #progressFile id=\"progress-bar\" max=\"100\" [value]=uploadProgress></progress>\n            </div>\n        </div>\n    </div>\n</fieldset>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { AddEditComponent } from './add.edit/add-edit.component';\r\nimport { FunctionComponent } from './function.component';\r\nimport { ListComponent } from './list.component';\r\nimport { MainSchedulerComponent } from './main-scheduler/main-scheduler.component';\r\nimport { AutoGeneratorComponent } from './max-flow-schedules/auto-generator.component';\r\nimport { ScheduleAllocatorComponent } from './schedule.allocator.component';\r\nimport { UploadAccountsComponent } from './upload-accounts/upload-accounts.component';\r\n\r\nconst routes: Routes = [\r\n    { path: '', component: ListComponent },\r\n    { path: 'add-edit', loadChildren: () => import('./add.edit/add.edit.module').then(x => x.AddEditModule)/* component: AddEditComponent */ },\r\n    { path: 'upload', component: UploadAccountsComponent},\r\n    { path: 'auto-generate-schedules', loadChildren: () => import('./max-flow-schedules/auto-generator.module').then(x => x.AutoGeneratorModule)/* component: AutoGeneratorComponent */},\r\n    { path: 'function/:id', component: FunctionComponent },\r\n    { path: 'schedule/:id', component: ScheduleAllocatorComponent },\r\n    { path: 'schedule-generate', component: MainSchedulerComponent},\r\n    \r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AccountsRoutingModule { }","import { AfterViewInit, Component, ElementRef, Input, OnInit, QueryList, Renderer2, ViewChild, ViewChildren } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subscription/* , finalize */ } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { AccountService, AlertService } from 'src/app/_services';\n\n@Component({\n  selector: 'app-upload-accounts',\n  templateUrl: './upload-accounts.component.html',\n  styleUrls: ['./upload-accounts.component.less']\n})\nexport class UploadAccountsComponent implements OnInit, AfterViewInit {\n  @ViewChildren(\"progressFile\") progressChildren: QueryList<ElementRef>;\n  @ViewChild(\"progressFile\") progressChild: ElementRef;\n  @Input() requiredFileType: string;\n\n  fileName = '';\n  uploadProgress: number = 0;\n  uploadSub: Subscription;\n  submitted = false;\n  fileHasBeenSelected: boolean = false;\n\n  accountService: AccountService;\n  constructor(accountService: AccountService,\n    private alertService: AlertService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private renderer: Renderer2) {\n\n    this.accountService = accountService;\n  }\n  ngAfterViewInit(): void {\n    this.progressChildren.changes.subscribe((comps: QueryList <ElementRef>) =>\n    {\n      if(comps.first != undefined)\n        comps.first.nativeElement.removeAttribute(\"value\")\n    });\n  }\n  ngOnInit(): void {\n    this.fileName = \"\";\n  }\n\n  onFileSelected(event: Event) {\n    const file: File = (event.target as HTMLInputElement).files[0];\n\n    if (file) {\n      this.fileHasBeenSelected = true;\n      this.fileName = file.name;\n    } else {\n      this.fileHasBeenSelected = false;\n    }\n  }\n  onSubmit(event: any, fileUpload: any) {\n\n    const file: File = fileUpload.files[0];\n\n    if (file) {\n      this.submitted = true;\n      this.fileName = file.name;\n      const formData = new FormData();\n      formData.append(\"file\", file);\n\n      if (file.type == \"application/x-msdownload\") {\n        this.alertService.error(\"File must be an .xlsx file type\");\n        return;\n      }\n\n      const upload$ = this.accountService.uploadAccountsFile(formData)\n        .pipe(\n          finalize(() => {\n            this.reset();\n          })\n        );\n\n      this.uploadSub = upload$.subscribe({\n        next: (value) => {\n          //this.submitted = false;\n          // if (value.type == HttpEventType.UploadProgress) {\n          //   this.uploadProgress = Math.round(100 * (value.loaded / value.total));\n          //   console.log(\"Progress:\" + this.uploadProgress);\n          //   if (this.uploadProgress == 100) {\n          //     this.uploadProgress = 0;\n          //     //this.progressChild.nativeElement.removeAttribute(\"value\");\n          //   }\n          // }\n        },\n        complete: () => {\n          this.alertService.info(\"Done\");\n          this.submitted = false;\n          this.uploadProgress = -1;\n          this.router.navigate(['../'], { relativeTo: this.route });\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.submitted = false;\n        }\n      });\n    }\n  }\n  cancelUpload() {\n    this.uploadSub.unsubscribe();\n    this.reset();\n  }\n\n  reset() {\n    this.uploadProgress = null;\n    this.uploadSub = null;\n  }\n}\n","import { NgModule } from '@angular/core';\r\n//import { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule, UpperCasePipe } from '@angular/common';\r\n\r\nimport { NGX_MAT_DATE_FORMATS, NgxMatDateAdapter, NgxMatDateFormats, NgxMatDatetimePickerModule } from '@angular-material-components/datetime-picker';\r\nimport { NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS, NgxMatMomentAdapter, NgxMatMomentModule } from '@angular-material-components/moment-adapter';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MAT_DATE_LOCALE, MatNativeDateModule, NativeDateAdapter } from '@angular/material/core';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { ApplicationPipesModuleModule } from 'src/app/application-pipes-module/application-pipes-module.module';\r\nimport { Constants } from 'src/app/constants';\r\nimport { DOBModule } from 'src/app/dob/dob.module';\r\nimport { MaterialModule } from 'src/app/material/material.module';\r\nimport { ScheduleModule } from 'src/app/schedule/schedule.module';\r\nimport { AccountsRoutingModule } from './accounts-routing.module';\r\nimport { CustomDateFormatDirective } from './custom-date-format.directive';\r\nimport { FunctionScheduleComponent } from './function-schedule/function-schedule.component';\r\nimport { FunctionComponent } from './function.component';\r\nimport { GenerateSchedulesComponent } from './generate-schedules/generate-schedules.component';\r\nimport { ListComponent } from './list.component';\r\nimport { MainSchedulerComponent } from './main-scheduler/main-scheduler.component';\r\nimport { ScheduleAllocatorComponent } from './schedule.allocator.component';\r\nimport { UploadAccountsComponent } from './upload-accounts/upload-accounts.component';\r\n\r\n\r\n\r\n// If using Moment\r\nconst CUSTOM_MOMENT_FORMATS: NgxMatDateFormats = {\r\n  parse: {\r\n    dateInput: Constants.dateTimeFormat,\r\n  },\r\n  display: {\r\n    dateInput: Constants.dateTimeFormat,\r\n    monthYearLabel: 'MMM YYYY',\r\n    dateA11yLabel: 'LL',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n  },\r\n};\r\n\r\n/* This is an alternative way of displaying Date in the format `${environment.dateFormat}` */\r\nexport class AppDateAdapter extends NativeDateAdapter {\r\n\r\n  override format(date: Date, displayFormat: Object): string {\r\n\r\n    if (displayFormat === Constants.dateFormat) {\r\n\r\n      const day = date.getDate();\r\n      var dayStr = day.toString().padStart(2, '0')\r\n      var month = date.getMonth() + 1;\r\n      var monthStr = month.toString().padStart(2, '0')\r\n      const year = date.getFullYear();\r\n      var yearStr = year.toString().padStart(4, '0')\r\n\r\n      return `${yearStr}-${monthStr}-${dayStr}`;\r\n    }\r\n\r\n    return date.toDateString();\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AccountsRoutingModule,\r\n    ScheduleModule,\r\n\r\n    MaterialModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatButtonModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    NgxMatDatetimePickerModule,\r\n    NgxMatMomentModule,\r\n    MatSelectModule,\r\n    DOBModule,\r\n    MatProgressBarModule,\r\n    ApplicationPipesModuleModule,\r\n  \r\n  ],\r\n  declarations: [\r\n    ListComponent,\r\n    FunctionComponent,\r\n    ScheduleAllocatorComponent,\r\n    UploadAccountsComponent,\r\n    CustomDateFormatDirective,\r\n    GenerateSchedulesComponent,\r\n    FunctionScheduleComponent,\r\n    MainSchedulerComponent,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: UpperCasePipe\r\n    },\r\n    {\r\n      provide: NgxMatDateAdapter,\r\n      useClass: NgxMatMomentAdapter, //Moment adapter\r\n      deps: [MAT_DATE_LOCALE, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS]\r\n    },\r\n    // values\r\n    {\r\n      provide: NGX_MAT_DATE_FORMATS, useValue: CUSTOM_MOMENT_FORMATS\r\n\r\n    },\r\n    // {\r\n    //   provide: DateAdapter, useClass: AppDateAdapter\r\n    // },\r\n  ],\r\n  exports: [\r\n    MatPaginatorModule\r\n  ]\r\n})\r\nexport class AccountsModule { }"],"x_google_ignoreList":[0]}